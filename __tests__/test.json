{
  "string": "
<!DOCTYPE html>
<!--[if IE 8]> <html lang="en" class="ie8 no-js"> <![endif]-->
<!--[if IE 9]> <html lang="en" class="ie9 no-js"> <![endif]-->
<!--[if !IE]><!-->
<html lang="en">
<!--<![endif]-->
<!-- BEGIN HEAD -->
<head>
    <meta charset="utf-8" />
    <title>Forgotten Conqueror | RoyalRoadL</title>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    
    <meta name="keywords" content="Forgotten Conqueror; Za1d3; free books online; web fiction; free; book; novel; royal road; royalroadl; rrl; legends; fiction">
    <meta name="description" content="Powerless and filled with raging anger for half his life, an avenger grasps hold of what was to be his redemption only to find despair and darkness. 
His mind lost, his anger went on to bring about the (...)">
    <meta property="fb:app_id" content="1585608748421060" />
    <meta property="og:type" content="books.book">
    <meta property="og:url" content="http://royalroadl.com/fiction/1439/forgotten-conqueror">
    <meta property="og:image" content="https://i.imgur.com/IbJ10X5.png">
    <meta property="og:site_name" content="Royal Road Legends">
    <meta property="og:description" content="Powerless and filled with raging anger for half his life, an avenger grasps hold of what was to be his redemption only to find despair and darkness. 
His mind lost, his anger went on to bring about the path of carnage. He is, but an inextinguishable flame that threatens to consume everything; all in the name of retribution.

Death was but a moments (...)">
    <meta property="books:rating:value" content="4.685703" />
    <meta property="books:rating:scale" content="5" />
    <meta property="books:author" content="Za1d3" />
    <meta property="books:isbn" content="" />
    <meta name="twitter:card" content="summary">
    <meta name="twitter:site" content="@RoyalRoadL">
    <meta name="twitter:creator" content="Za1d3">
    <meta name="twitter:title" content="Forgotten Conqueror">
    <meta name="twitter:description" content="Powerless and filled with raging anger for half his life, an avenger grasps hold of what was to be his redemption only to find despair and darkness. 
His mind lost, his anger went on to bring about the (...)">
    <meta name="twitter:image" content="https://i.imgur.com/IbJ10X5.png">
    <link rel="alternate" type="application/rss+xml" title="Updates for Forgotten Conqueror" href="/syndication/1439" />

    <!-- BEGIN GLOBAL MANDATORY STYLES -->
    <link href="//fonts.googleapis.com/css?family=Open+Sans:400,300,600,700&subset=all" rel="stylesheet" type="text/css" />
    <link href="/bundles/fontAwesome?v=nct2-5iwxz9cdYgvXADLoZP7eoYuEfQVPyXdCvE6CAM1" rel="stylesheet"/>

    <link href="/Content/Themes/Styles/Core?v=bKb85H7-UCB_JJVaKvfmzClMknN7Ww7h4SArb-6Oppc1" rel="stylesheet"/>

    <link href="/Content/Themes/Bootstrap/Site.css" rel="stylesheet" />
    <link href="/Content/login.min.css" rel="stylesheet" type="text/css" />
    <link href="/bundles/styles/custom?v=occMVgvs4ZdIz_ngCPx95wi4sFrwrx8VqWEP_Zy9k781" rel="stylesheet"/>

    <!-- END THEME LAYOUT STYLES -->
    
    <link rel="stylesheet" type="text/css" href="/Content/profile.min.css" />
    <link rel="stylesheet" type="text/css" href="/Content/plugins/socicon/socicon.css" />
    <link rel="stylesheet" href="/Scripts/plugins/datatables/datatables.min.css" type="text/css" />
    <style>
        table.dataTable.order-column tbody tr:hover > .sorting_1 {
            background-color: #eef1f5 !important;
        }

        .container {
            padding-top: 0 !important;
        }

        @media screen and (min-width: 992px) {
            .md-text-left {
                text-align: left;
            }

            .fic-buttons {
                margin-top: 130px;
            }

            .fic-title {
                margin-top: 50px;
            }
        }

        @media screen and (max-width: 991px) {
            .fic-buttons {
                margin: 10px 0;
            }

            .fic-title {
                margin: 10px 0;
            }

            .blog-comments {
                width: 100%;
            }
        }

        .fiction-page > .row.fic-header > .hidden-xs {
            z-index: 1;
        }

        img.img-offset {
            margin-top: 40px;
            margin-bottom: -150px;
            height: 300px;
        }

        @media screen and (min-width: 768px) {
            .row.no-gutter > div {
                padding: 0;
            }
        }

        .row.no-gutter > div:first-child {
            padding-left: 15px;
        }

        .row.no-gutter > div:last-child {
            padding-right: 15px;
        }

        .review-new .mt-checkbox {
            height: 29px;
            margin: 0;
        }

            .review-new .mt-checkbox span {
                top: 5px;
            }

        h1 {
            font-size: 30px;
        }

        @media screen and (max-width: 280px) {
            .reviews.portlet {
                padding: 0;
            }
        }
    </style>

    <link rel="shortcut icon" href="https://royalroadl.com/favicon.ico" />
    <script src="/bundles/jquery?v=evsdjeysOuM7iR7IO1h1kG2tLam8q5YDTTJKKbuRtXQ1"></script>

    <script src="/Scripts/Plugins/tinymce/tinymce.min.js" type="text/javascript"></script>
    <script src="/bundles/site?v=XPtZBqTApSpOMMgBfASnPIldTj5JkbmN8eC-AQuoqbk1"></script>

    <script src="/Scripts/showads.js" type="text/javascript"></script>
        <script type='text/javascript'>
            window.googletag = window.googletag || {};
            googletag.cmd = googletag.cmd || [];
            window.m2hb = window.m2hb || {};
            m2hb.que = m2hb.que || [];
            m2hb.ssl = 'https:' == document.location.protocol;
            window.M2_TIMEOUT = 1000;
            m2hb.maxRetries = 20;
            m2hb.retries = 0;

            m2hb.loadJS = function (src, async) {
                m2hb.loadedJS = m2hb.loadedJS || [];
                m2hb.loadedJS.push(src);
                (function () {
                    var script = document.createElement("script");
                    script.async = async || true;
                    script.type = "text/javascript";
                    script.src = (m2hb.ssl ? 'https:' : 'http:') + src;
                    var target = document.getElementsByTagName("head")[0];
                    target.insertBefore(script, target.firstChild);
                })();
            };

            if (typeof m2hb.initAdserver == 'undefined') {
                m2hb.initAdserver = function () {
                    if (m2hb.initAdserverSet) return;
                    if (typeof m2hb.timeRemaining == 'undefined') {
                        m2hb.timeRemaining = M2_TIMEOUT;
                    }
                    if (m2hb.timeRemaining > 0) {
                        m2hb.timeRemaining -= 100;
                        if (!m2hb.m2hbBidsReady) {
                            setTimeout(function () { m2hb.initAdserver(); }, 100);
                            return;
                        }
                    }
                    if (!googletag.pubadsReady && (m2hb.retries <= m2hb.maxRetries)) {
                        m2hb.retries++;
                        setTimeout(function () { m2hb.initAdserver(); }, 50);
                        return;
                    }
                    m2hb.initAdserverSet = true;
                    googletag.cmd.push(function () {
                        m2hb.que.push(function () {
                            m2hb.setTargetingForGPTAsync();
                        });
                        googletag.pubads().refresh();
                    });
                };
            }
            window.initAdserver = function () { return m2hb.initAdserver(); }
            m2hb.loadJS('//m2d.m2.ai/M2D.RoyalRoad.Desktop.min.js');

            googletag.cmd.push(function () {

                googletag.pubads().disableInitialLoad();

                m2hb.disabledGptInitialLoad = true;

            });

            m2hb.loadJS('//www.googletagservices.com/tag/js/gpt.js');

            m2hb.initAdserver();

            googletag.cmd.push(function () {
googletag.defineSlot('/268575356/RR_Desktop_Content_Sidebar_Top', [[1,1],[300, 250]], 'div-gpt-ad-1470935423061-4').addService(googletag.pubads());googletag.defineSlot('/268575356/RR_Desktop_Content_Sidebar_Mid', [300, 250], 'div-gpt-ad-1470935423061-3').addService(googletag.pubads());googletag.defineSlot('/268575356/RR_Desktop_Content_Mid', [[728, 90], [300, 250], [336, 280]], 'div-gpt-ad-1470935423061-2').addService(googletag.pubads());googletag.defineSlot('/268575356/RR_Post_Header_Top', [[728, 90], [320, 50], [320, 100]], 'div-gpt-ad-1470935423061-13').addService(googletag.pubads());googletag.defineSlot('/268575356/RR_Post_Header_Mid', [[728, 90], [320, 50], [320, 100]], 'div-gpt-ad-1470935423061-12').addService(googletag.pubads());                                googletag.pubads().enableSingleRequest();
                googletag.enableServices();
            });
        </script>
    <script type="text/javascript">
        var appInsights = window.appInsights || function (config) {
            function i(config) { t[config] = function () { var i = arguments; t.queue.push(function () { t[config].apply(t, i) }) } } var t = { config: config }, u = document, e = window, o = "script", s = "AuthenticatedUserContext", h = "start", c = "stop", l = "Track", a = l + "Event", v = l + "Page", y = u.createElement(o), r, f; y.src = config.url || "https://az416426.vo.msecnd.net/scripts/a/ai.0.js"; u.getElementsByTagName(o)[0].parentNode.appendChild(y); try { t.cookie = u.cookie } catch (p) { } for (t.queue = [], t.version = "1.0", r = ["Event", "Exception", "Metric", "PageView", "Trace", "Dependency"]; r.length;) i("track" + r.pop()); return i("set" + s), i("clear" + s), i(h + a), i(c + a), i(h + v), i(c + v), i("flush"), config.disableExceptionTracking || (r = "onerror", i("_" + r), f = e[r], e[r] = function (config, i, u, e, o) { var s = f && f(config, i, u, e, o); return s !== !0 && t["_" + r](config, i, u, e, o), s }), t
        }({
            instrumentationKey: "28cfaecb-3538-478b-8230-9299a2d3646a",
            disableAjaxTracking: true,
            disableExceptionTracking: true
        });

        window.appInsights = appInsights;
        appInsights.trackPageView();
    </script>
</head>
<body class="page-container-bg-solid">
    <div class="background-overlay"></div>
    <div class="page-header">
        
<!-- BEGIN HEADER TOP -->
<div class="page-header-top">
    <div class="container">
        <!-- BEGIN LOGO -->
        <div class="page-logo">
            <a href="/">
                <img src="/Content/logo.png" alt="RoyalRoadL" class="logo-default">
            </a>
        </div>
        <!-- END LOGO -->
        <!-- BEGIN RESPONSIVE MENU TOGGLER -->
        <a href="javascript:;" class="menu-toggler"></a>
        <!-- END RESPONSIVE MENU TOGGLER -->
        <!-- BEGIN TOP NAVIGATION MENU -->
        <div class="top-menu">
            <ul class="nav navbar-nav pull-right">
                <!-- BEGIN NOTIFICATION DROPDOWN -->
                <li class="dropdown dropdown-extended dropdown-notification dropdown-dark" id="header_notification_bar">
                    <a href="javascript:;" class="dropdown-toggle notifications" data-close-others="true">
                        <i class="fa fa-bell"></i>
                        <span class="badge badge-default alert no-announcement" data-count="1">1</span>
                    </a>
                    <ul class="dropdown-menu">
                        <li class="external">
                            <h3>
                                You have
                                <strong><span class="no-announcement">1</span> pending</strong> notifications
                            </h3>
                            
                        </li>
                        <li>
                            <ul class="dropdown-menu-list scroller" style="height: 250px;" data-handle-color="#637283">
                                    <li class="announcement" data-id="79">
                                            <div class="mt-element-overlay no-space">
                                                <div class="mt-overlay-1" style="text-align: left; float: none; overflow: initial; padding: 16px 15px 18px">
                                                    <span class="time"><time format="ago" >3 days 18 hours 32 minutes 38 seconds </time></span>
                                                    <span class="details">
                                                        <span class="label label-sm bg-green">Notification</span>
                                                        <span>
                                                            Check out Falcon Logue's new book [Hero of Naught] on Amazon 
                                                        </span>
                                                    </span>
                                                    <div class="mt-overlay text-center">
                                                        <ul class="mt-info">
                                                                <li>
                                                                    <a class="btn btn-primary" href="https://www.amazon.com/Hero-Naught-Jeffrey-Falcon-Logue-ebook/dp/B06XZXJN75" onclick="checkTouchNotification(this, event)">
                                                                        Details
                                                                    </a>
                                                                </li>
                                                            <li>
                                                                <a class="btn btn-warning" onclick="dismiss(this, event, 79)">
                                                                    Dismiss
                                                                </a>
                                                            </li>
                                                        </ul>
                                                    </div>
                                                </div>
                                            </div>
                                    </li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <!-- END NOTIFICATION DROPDOWN -->

                    <li>
                        <a href="https://royalroadl.com/user/login" onclick="$('#login').modal();event.preventDefault()">
                            <i class="icon-login"></i> Log In
                        </a>
                    </li>
            </ul>
        </div>
        <!-- END TOP NAVIGATION MENU -->
    </div>
</div>
<div class="modal fade" id="login" role="basic" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
            </div>
            <div class="modal-body">
                
                
<div class="login">
    <div class="content" style="width: initial; margin: initial;">
        <!-- BEGIN LOGIN FORM -->
        <form class="login-form-partial" action="https://royalroadl.com/user/login" method="post">
            <h3 class="form-title font-green">Sign In</h3>
            <div class="alert alert-danger display-hide def-error">
                <button class="close" data-close="alert"></button>
                <span> Enter any username and password. </span>
            </div>
            <div class="form-group">
                <!--ie8, ie9 does not support html5 placeholder, so we just show field title for that-->
                <label class="control-label visible-ie8 visible-ie9">Username</label>
                <input class="form-control form-control-solid" type="text" required placeholder="Username" name="username" />
            </div>
            <div class="form-group">
                <label class="control-label visible-ie8 visible-ie9">Password</label>
                <input class="form-control form-control-solid" type="password" required placeholder="Password" name="password" />
            </div> 
            <div class="form-actions">
                <button type="submit" class="btn green uppercase">Login</button>
                <label class="rememberme check mt-checkbox mt-checkbox-outline">
                    <input type="checkbox" name="remember" value="true" />Remember
                    <span></span>
                    <span></span>
                </label>
                <a href="/account/forgotpassword" class="forget-password">Forgot Password?</a>
            </div>
            
            <div class="create-account">
                <p>
                    <a href="/account/register"  class="uppercase">Create an account</a>
                </p>
            </div>
        </form>
        <!-- END LOGIN FORM -->
        
    </div>
</div>

<script src="/bundles/jqueryval?v=0kw74bk81Y97o7RgmGplTFKKyLgjsV1pnT5LyeC5oB41"></script>


<script>
    $(document).ready(function () {
        $(".login-form-partial").validate({
            errorElement: "span",
            errorClass: "help-block",
            focusInvalid: !1,
            rules: {
                username: {
                    required: !0
                },
                password: {
                    required: !0
                },
                remember: {
                    required: !1
                }
            },
            messages: {
                username: {
                    required: "Username is required."
                },
                password: {
                    required: "Password is required."
                }
            },
            invalidHandler: function (e, r) {
                $(".alert-danger.def-error", $(".login-form-partial")).show()
            },
            highlight: function (e) {
                $(e)
                    .closest(".form-group")
                    .addClass("has-error")
            },
            success: function (e) {
                e
                    .closest(".form-group")
                    .removeClass("has-error"),
                e.remove()
            },
            errorPlacement: function (e, r) {
                e.insertAfter(r.closest(".input-icon"))
            },
            submitHandler: function (e) {
                e.submit()
            }
        });
        $(".login-form-partial input").keypress(function (e) {
            return 13 == e.which
                ? ($(".login-form-partial").validate().form() && $(".login-form-partial").submit(), !1)
                : void 0
        });
    });
</script>
            </div>
        </div>
    </div>
</div>
<!-- END HEADER TOP -->
        <div class="page-header-menu">
            <div class="container">
                <form class="search-form" action="/fictions/search" method="GET">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Search" name="keyword">
                        <span class="input-group-btn">
                            <a href="javascript:;" class="btn submit">
                                <i class="icon-magnifier"></i>
                            </a>
                            <a href="/fictions/search" class="btn btn-icon-only btn-primary popovers" data-trigger="hover" data-container="body" data-placement="bottom" data-content="Advanced Search"><i class="fa fa-list"></i></a>
                        </span>
                    </div>
                </form>
                <div class="hor-menu  ">
    <ul class="nav navbar-nav">
            <li class="menu-dropdown classic-menu-dropdown ">
                <a href="javascript:;" >
                        <i class="fa fa-book"></i> Read                                            <span class="arrow"></span>
                </a>

                    <ul class="dropdown-menu pull-left">
                            <li class=" ">
                                <a href="/fictions/best-rated" class="nav-link  ">
                                    <i class="fa fa-trophy"></i> Best Rated
                                </a>
                            </li>
                            <li class=" ">
                                <a href="/fictions/active-popular" class="nav-link  ">
                                    <i class="fa fa-fire"></i> Active-only ranking
                                </a>
                            </li>
                            <li class=" ">
                                <a href="/fictions/complete" class="nav-link  ">
                                    <i class="fa fa-flag-checkered"></i> Complete
                                </a>
                            </li>
                            <li class=" ">
                                <a href="/fictions/weekly-popular" class="nav-link  ">
                                    <i class="fa fa-line-chart"></i> Popular this week
                                </a>
                            </li>
                            <li class=" ">
                                <a href="/fictions/latest-updates" class="nav-link  ">
                                    <i class="fa fa-clock-o"></i> Latest Updates
                                </a>
                            </li>
                            <li class=" ">
                                <a href="/fictions/new-releases" class="nav-link  ">
                                    <i class="fa fa-refresh"></i> New Releases
                                </a>
                            </li>
                            <li class=" ">
                                <a href="/fictions/search" class="nav-link  ">
                                    <i class="fa fa-search"></i> Search
                                </a>
                            </li>
                            <li class=" ">
                                <a href="/fiction/random" class="nav-link  ">
                                    <i class="fa fa-random"></i> Surprise me!
                                </a>
                            </li>
                    </ul>
            </li>
            <li class="menu-dropdown classic-menu-dropdown ">
                <a href="/my/fictions" >
                        <i class="fa fa-pencil"></i> Write                                    </a>

            </li>
            <li class="menu-dropdown classic-menu-dropdown ">
                <a href="https://forum.royalroadl.com" >
                        <i class="fa fa-comments-o"></i> Forums                                    </a>

            </li>
            <li class="menu-dropdown classic-menu-dropdown ">
                <a href="https://discord.gg/6t9VDDU" target=_blank>
                        <img src="/Content/discord.png" style="opacity:0.6;width:17.5px;height:14px"/> Chat                                    </a>

            </li>
            <li class="menu-dropdown classic-menu-dropdown ">
                <a href="javascript:;" >
                        <i class="fa fa-question-circle"></i> Help                                            <span class="arrow"></span>
                </a>

                    <ul class="dropdown-menu pull-left">
                            <li class=" ">
                                <a href="/support/faq" class="nav-link  ">
                                    <i class="fa fa-list"></i> F.A.Q.
                                </a>
                            </li>
                            <li class=" ">
                                <a href="https://forum.royalroadl.com/forumdisplay.php?fid=1125" class="nav-link  ">
                                    <i class="fa fa-users"></i> Community Help
                                </a>
                            </li>
                            <li class=" ">
                                <a href="/support" class="nav-link  ">
                                    <i class="fa fa-support"></i> Support
                                </a>
                            </li>
                            <li class=" ">
                                <a href="http://status.royalroadl.com" class="nav-link  ">
                                    <i class="fa fa-check-circle-o"></i> Status
                                </a>
                            </li>
                    </ul>
            </li>
            <li class="menu-dropdown classic-menu-dropdown ">
                <a href="/premium" >
                        <i class="fa fa-star"></i> Premium                                    </a>

            </li>
    </ul>
</div>
            </div>
        </div>
    </div>
    <div class="page-container">
        <div class="page-content-wrapper">
            <div class="page-content">
                <div class="container">
                    


<!-- BEGIN PAGE CONTENT INNER -->
<div class="page-content-inner" vocab="http://schema.org/" typeof="Book">
    <meta property="sameAs" content="http://royalroadl.com/fiction/1439" />
    <div class="fiction-page">
        <div class="row fic-header">
            <div class="col-md-3 hidden-sm hidden-xs text-center">
                <img src="https://i.imgur.com/IbJ10X5.png" id="cover-Forgotten Conqueror" onError="this.onerror=null; this.src='//i.imgur.com/dzOACJf.png';" class="img-offset thumbnail inline-block" alt="Forgotten Conqueror" property="image"></img>
            </div>
            <div class="col-md-5 col-lg-6 text-center md-text-left fic-title">
                
                <h1 class="font-white" property="name">Forgotten Conqueror</h1>
                <h4 class="font-white" property="author" typeof="Person"><span class="small font-white">by </span><span property="name"><a href="/user/profile/8357" class="font-white">Za1d3</a></span></h4>
            </div>
            <div class="col-md-4 col-lg-3 fic-buttons text-center md-text-left">

                    <a href="/fiction/1439/forgotten-conqueror/chapter/11117/prologue-chapter-1" class="btn btn-lg btn-primary">
                        <i class="fa fa-book"></i>
                        <span>Start Reading</span>
                    </a>
            </div>
        </div>
        <div class="fiction row">
            <div class="col-sm-12">
                <!--START SIDEBAR-->
                <div style="margin-right: 0; margin-left: 20px; padding-top: 10px" class="profile-sidebar pull-right hidden-xs hidden-sm">
                    <!--START FICTION OPTIONS-->

                        <div class="icon-container">
                            <i class="fa fa-star"></i>
                            <span class="tip">Rate it</span>
                            <span>
<form action="/fictions/rate/1439" id="rating_form" method="post"><input name="__RequestVerificationToken" type="hidden" value="Nm1DqbAkRp_GuG-U6jyVgN6cqxMsEBBgdobtWvI47ry4z55Aq6LSIVJIXLs2_QkCasrA255BQdUxobEB8YcF0VZ25f9xkUNrciLFuXI-sSA1" />                                    <input type="hidden" name="id" value="1439" />
    <fieldset name="rating" class="star-select">
            <input type="radio"  id="5ratingStars" name="rating" class="full" value="10"  />
            <label for="5ratingStars" class="full" title="5 Stars"></label>
            <input type="radio"  id="4 AndratingHalfStar" name="rating" class="half" value="9"  />
            <label for="4 AndratingHalfStar" class="half" title="4 and half star"></label>
            <input type="radio"  id="4ratingStars" name="rating" class="full" value="8"  />
            <label for="4ratingStars" class="full" title="4 Stars"></label>
            <input type="radio"  id="3 AndratingHalfStar" name="rating" class="half" value="7"  />
            <label for="3 AndratingHalfStar" class="half" title="3 and half star"></label>
            <input type="radio"  id="3ratingStars" name="rating" class="full" value="6"  />
            <label for="3ratingStars" class="full" title="3 Stars"></label>
            <input type="radio"  id="2 AndratingHalfStar" name="rating" class="half" value="5"  />
            <label for="2 AndratingHalfStar" class="half" title="2 and half star"></label>
            <input type="radio"  id="2ratingStars" name="rating" class="full" value="4"  />
            <label for="2ratingStars" class="full" title="2 Stars"></label>
            <input type="radio"  id="1 AndratingHalfStar" name="rating" class="half" value="3"  />
            <label for="1 AndratingHalfStar" class="half" title="1 and half star"></label>
            <input type="radio"  id="1ratingStars" name="rating" class="full" value="2"  />
            <label for="1ratingStars" class="full" title="1 Stars"></label>
            <input type="radio"  id="ratingHalfStar" name="rating" class="half" value="1"  />
            <label for="ratingHalfStar" class="half" title="half star"></label>
    </fieldset>
</form>                            </span>
                        </div>
                    <div class="dropdown-icon">
                        <input type="checkbox" id="bookshelf-dropdown" />
                        <label for="bookshelf-dropdown">
                            <i class="fa fa-book"></i>
                            <span class="tip">Add to your</span>
                            <span>Bookshelf</span>
                        </label>
                        <div class="dropdown-content">
                            <a class="dropdown-option " href="/fictions/setbookmark/1439?type=follow&amp;mark=True">
                                <i class="fa fa-bookmark"></i>
                                    <span class="tip">Click to</span>
                                    <span>Bookmark</span>
                            </a>
                            <a class="dropdown-option " href="/fictions/setbookmark/1439?type=favorite&amp;mark=True">
                                <i class="fa fa-star"></i>
                                <span class="tip">Add to your</span>
                                <span>Favorite</span>
                            </a>
                            <a class="dropdown-option " href="/fictions/setbookmark/1439?type=ril&amp;mark=True">
                                <i class="fa fa-list"></i>
                                <span class="tip">Save it to</span>
                                <span>Read Later</span>
                            </a>
                        </div>
                    </div>
                                                                                                    <a class="button-icon-large" value="report" href="/report/fiction/1439">
                        <i class="fa fa-warning"></i>
                        <span class="tip">Fiction breaking rules?</span>
                        <span>Report</span>
                    </a>
                    <!--END FICITON OPTIONS-->
                        <div class="portlet light profile-sidebar-portlet text-center ac" style="padding-top: 5px !important;">
                            <h6 class="bold uppercase">Advertisement</h6>
                            <div class="square text-center">
                                <!-- /268575356/RR_Desktop_Content_Sidebar_Top -->
<div id='div-gpt-ad-1470935423061-4'>
<script type='text/javascript'>
if(window.innerWidth>=991) {googletag.cmd.push(function() { googletag.display('div-gpt-ad-1470935423061-4'); });}
</script>
</div>

                            </div>
                        </div>
                    <!--START USER SIDEBAR CARD-->
                    <div class="portlet light">
                        <div class="portlet-title">
                            <div class="caption">
                                <i class="fa fa-user"></i>
                                <span class="caption-subject bold uppercase">Author</span>
                            </div>
                        </div>
                        <div class="portlet-body">
                            <div class="mt-element-card mt-card-round mt-element-overlay">
                                <div class="mt-card-item no-border">
                                    <div class="mt-card-avatar mt-overlay-1">
                                        <img src="https://i.imgur.com/uOb6HRM.png?dateline=1424847810" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="" alt="Za1d3" ></img>
                                    </div>
                                    <div class="mt-card-content">
                                        <h3 class="mt-card-name">
                                            <a class="font-dark" href="/user/profile/8357">Za1d3</a>
                                        </h3>
                                        <p class="mt-card-desc font-grey-mint"></p>
                                        <div class="mt-card-social">
                                            <ul>
                                                                                                                                                                                                                                                    <li>
                                                        <a href="http://forum.royalroadl.com/private.php?action=send&uid=8357">
                                                            <i class="fa fa-envelope"></i>
                                                        </a>
                                                    </li>
                                                <li>
                                                    <a href="//royalroadl.com/user/profile/8357">
                                                        <i class="fa fa-user"></i>
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!--START ACHIEVEMENT-->
                        <div class="portlet-title">
                            <div class="caption">
                                <i class="fa fa-trophy"></i>
                                <span class="caption-subject bold uppercase">Achievements</span>
                            </div>
                        </div>
                        <div class="portlet-body">
                            <div class="row">
                            </div>
                            <!--END ACHIEVEMENTS-->
                        </div>
                    </div>
                        <div class="portlet light profile-sidebar-portlet text-center ac" style="padding-top: 5px !important;">
                            <h6 class="bold uppercase">Advertisement</h6>
                            <div class="square text-center">
                                <!-- /268575356/RR_Desktop_Content_Sidebar_Mid -->
<div id='div-gpt-ad-1470935423061-3'>
<script type='text/javascript'>
if(window.innerWidth>=991) {googletag.cmd.push(function() { googletag.display('div-gpt-ad-1470935423061-3'); });}
</script>
</div>

                            </div>
                        </div>
                    <!--END USER SIDEBAR CARD-->
                </div>
                <!--END SIDEBAR-->
                <!--START MAIN CONTENT-->
                <div class="fiction-info profile-content">
                    <div class="portlet light row" style="min-height: 180px;">
                        
                        <div class="col-md-4"></div>
                        <div class="col-md-8">
                            
                            <div class="margin-bottom-10" style="min-height: 10px">
                                        <span class="label label-default label-sm bg-blue-hoki" style="overflow: hidden; display: inline-block; padding: 3px 5px;">Original</span>

                                <span class="tags">
                                    <input type="checkbox" id="showTags" />
                                        <span class="label label-default label-sm bg-blue-dark" property="genre">Action</span>
                                        <span class="label label-default label-sm bg-blue-dark" property="genre">Adventure</span>
                                        <span class="label label-default label-sm bg-blue-dark" property="genre">Fantasy</span>
                                        <span class="label label-default label-sm bg-blue-dark" property="genre">Romance</span>
                                                                            <span class="label label-default label-sm bg-blue-dark" property="genre">School Life</span>
                                        <span class="label label-default label-sm bg-blue-dark" property="genre">Supernatural</span>
                                    <label for="showTags"></label>
                                </span>
                            </div>
                                <div style="padding: 5px 0" class="text-center font-red-sunglo">

                                        <strong>Warning</strong>
                                        <span>This fiction contains:</span>
                                        <ul class="list-inline">
                                                <li>Sexual Content</li>
                                        </ul>
                                </div>
                            <div class="description">
                                <input type="checkbox" value="" id="showMore" />
                                <div class="hidden-content" property="description">
                                    Powerless and filled with raging anger for half his life, an avenger grasps hold of what was to be his redemption only to find despair and darkness. <br>His mind lost, his anger went on to bring about the path of carnage. He is, but an inextinguishable flame that threatens to consume everything; all in the name of retribution.<br><br>Death was but a moments reprieve for his agony. His rage overflows even after the sweet release.<br>Unable to be snuffed out by the laws of the world, he is granted life once more In a different era. All those whom his vengeance is focused on, vanished into obscurity with the passage of time. <br><br>What does one who has all the power of the world at his finger-tips do, when all the reasons for that power have vanished? 
                                </div>
                                <label for="showMore" class="bold uppercase small"></label>
                            </div>
                        </div>
                    </div>
                    <div class="portlet light">
                        <div class="portlet-body fiction-stats">
                            <input type="checkbox" name="Show more stats" id="showStats" />
                            <label for="showStats">
                                <i class="fa fa-line-chart"></i>
                                <span class="title bold uppercase">Statistics</span>
                                <i class="fa fa-caret-down pull-right"></i>
                            </label>
                            <div class="stats-content">
                                <div class="col-sm-6" property="aggregateRating" typeof="AggregateRating">
                                    <meta property="ratingValue" content="4.685703" />
                                    <meta property="bestRating" content="5" />
                                    <meta property="ratingCount" content="1322" />
                                    <ul class="list-unstyled">
                                        <li class="bold uppercase list-item">Overall Score</li>
                                        <li class="list-item">
                                            <span class="star star-46 font-red-sunglo popovers" data-trigger="hover" data-container="body" data-placement="top" data-original-title="Overall Score" data-content="4.69 / 5"></span>
                                        </li>
                                        <li class="bold uppercase list-item">Style Score</li>
                                        <li class="list-item">
                                            <span class="star star-45 font-red-sunglo popovers" data-trigger="hover" data-container="body" data-placement="top" data-original-title="Style Score" data-content="4.55 / 5"></span>
                                        </li>
                                        <li class="bold uppercase list-item">Story Score</li>
                                        <li class="list-item">
                                            <span class="star star-44 font-red-sunglo popovers" data-trigger="hover" data-container="body" data-placement="top" data-original-title="Story Score" data-content="4.49 / 5"></span>
                                        </li>
                                        <li class="bold uppercase list-item">Character Score</li>
                                        <li class="list-item">
                                            <span class="star star-43 font-red-sunglo popovers" data-trigger="hover" data-container="body" data-placement="top" data-original-title="Character Score" data-content="4.39 / 5"></span>
                                        </li>
                                        <li class="bold uppercase list-item">Grammar Score</li>
                                        <li class="list-item">
                                            <span class="star star-45 font-red-sunglo popovers" data-trigger="hover" data-container="body" data-placement="top" data-original-title="Grammar Score" data-content="4.54 / 5"></span>
                                        </li>
                                    </ul>
                                </div>
                                <div class="col-sm-6">
                                    <ul class="list-unstyled">
                                        <li class="bold uppercase">Total Views :</li>
                                        <li class="bold uppercase font-red-sunglo">8,009,361</li>
                                        <li class="bold uppercase">Average Views :</li>
                                        <li class="bold uppercase font-red-sunglo">75,560</li>
                                        <li class="bold uppercase">Followers :</li>
                                        <li class="bold uppercase font-red-sunglo">9,814</li>
                                        <li class="bold uppercase">Favorites :</li>
                                        <li class="bold uppercase font-red-sunglo">4,526</li>
                                        <li class="bold uppercase">Ratings :</li>
                                        <li class="bold uppercase font-red-sunglo">1,322</li>
                                        <li class="bold uppercase">Pages :</li>
                                        <li class="bold uppercase font-red-sunglo" property="numberOfPages">1,419</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="portlet light text-center" style="padding-top: 5px !important;">
                                    <h6 class="bold uppercase">Advertisement</h6>
                                    <div class="wide text-center ">
                                        <!-- /268575356/RR_Desktop_Content_Mid -->
<div id='div-gpt-ad-1470935423061-2'>
<script type='text/javascript'>
if(true) {googletag.cmd.push(function() { googletag.display('div-gpt-ad-1470935423061-2'); });}
</script>
</div>

                                    </div>
                                </div>
                            </div>
                        </div>
                    <!-- START MOBILE OPTIONS -->
                    <div style="padding-top: 10px" class="visible-xs visible-sm">
                        <!--START FICTION OPTIONS-->

                    <a class="button-icon-large button-primary" href="#toc" rel="nofollow">
                        <i class="fa fa-list-alt"></i>
                        <span class="tip">Go to</span>
                        <span>Table of Contents</span>
                    </a>
                            <div class="icon-container">
                                <i class="fa fa-star"></i>
                                <span class="tip">Rate it</span>
                                <span>
<form action="/fictions/rate" id="1439" method="post"><input name="__RequestVerificationToken" type="hidden" value="CJXPdoJAFqNqjGCKT4s8AZgvER6CBZ3YPitWGEhSUJ8ZkDTrtQo5fEsvJFDq3OxR-1swgm-_FuqQGBU49mf2QJw0YVQWcUcYgWr_1mGXeTA1" />                                        <input type="hidden" name="id" value="1439" />
    <fieldset name="rating" class="star-select">
            <input type="radio"  id="5ratingStars" name="rating" class="full" value="10"  />
            <label for="5ratingStars" class="full" title="5 Stars"></label>
            <input type="radio"  id="4 AndratingHalfStar" name="rating" class="half" value="9"  />
            <label for="4 AndratingHalfStar" class="half" title="4 and half star"></label>
            <input type="radio"  id="4ratingStars" name="rating" class="full" value="8"  />
            <label for="4ratingStars" class="full" title="4 Stars"></label>
            <input type="radio"  id="3 AndratingHalfStar" name="rating" class="half" value="7"  />
            <label for="3 AndratingHalfStar" class="half" title="3 and half star"></label>
            <input type="radio"  id="3ratingStars" name="rating" class="full" value="6"  />
            <label for="3ratingStars" class="full" title="3 Stars"></label>
            <input type="radio"  id="2 AndratingHalfStar" name="rating" class="half" value="5"  />
            <label for="2 AndratingHalfStar" class="half" title="2 and half star"></label>
            <input type="radio"  id="2ratingStars" name="rating" class="full" value="4"  />
            <label for="2ratingStars" class="full" title="2 Stars"></label>
            <input type="radio"  id="1 AndratingHalfStar" name="rating" class="half" value="3"  />
            <label for="1 AndratingHalfStar" class="half" title="1 and half star"></label>
            <input type="radio"  id="1ratingStars" name="rating" class="full" value="2"  />
            <label for="1ratingStars" class="full" title="1 Stars"></label>
            <input type="radio"  id="ratingHalfStar" name="rating" class="half" value="1"  />
            <label for="ratingHalfStar" class="half" title="half star"></label>
    </fieldset>
</form>                                </span>
                            </div> 
                        <div class="dropdown-icon">
                            <input type="checkbox" id="bookshelf-mobile" />
                            <label for="bookshelf-mobile">
                                <i class="fa fa-book"></i>
                                <span class="tip">Add to your</span>
                                <span>Bookshelf</span>
                            </label>
                            <div class="dropdown-content">
                                <a class="dropdown-option " href="/fictions/setbookmark/1439?type=follow&amp;mark=True">
                                    <i class="fa fa-bookmark"></i>
                                        <span class="tip">Click to</span>
                                        <span>Bookmark</span>
                                </a>
                                <a rel="nofollow" class="dropdown-option " href="/fictions/setbookmark/1439?type=favorite&amp;mark=True">
                                    <i class="fa fa-star"></i>
                                    <span class="tip">Add to your</span>
                                    <span>Favorite</span>
                                </a>
                                <a rel="nofollow" class="dropdown-option " href="/fictions/setbookmark/1439?type=ril&amp;mark=True">
                                    <i class="fa fa-list"></i>
                                    <span class="tip">Save it to</span>
                                    <span>Read Later</span>
                                </a>
                            </div>
                        </div>
                                                
                        <a class="button-icon-large" value="report" name="action">
                            <i class="fa fa-warning"></i>
                            <span class="center">Report</span>
                        </a>
                        <!--END FICITON OPTIONS-->
                            <div class="portlet light profile-sidebar-portlet text-center ac" style="padding-top: 5px !important;">
                                <h6 class="bold uppercase">Advertisement</h6>
                                <div class="square text-center">
                                    <!-- /268575356/RR_Post_Header_Top -->
<div id='div-gpt-ad-1470935423061-13'>
<script type='text/javascript'>
if(window.innerWidth<991) {googletag.cmd.push(function() { googletag.display('div-gpt-ad-1470935423061-13'); });}
</script>
</div>

                                </div>
                            </div>
                        <!--END FICTION OPTIONS-->
                        <div class="portlet light visible-xs">
                            <div class="portlet-title">
                                <div class="caption">
                                    <i class="fa fa-user"></i>
                                    <span class="caption-subject bold uppercase">Author</span>
                                </div>
                            </div>
                            <div class="portlet-body">
                                <div class="mt-element-card mt-card-round mt-element-overlay">
                                    <div class="mt-card-item no-border">
                                        <div class="mt-card-avatar mt-overlay-1">
                                            <img src="https://i.imgur.com/uOb6HRM.png?dateline=1424847810" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="" alt="Za1d3" ></img>
                                        </div>
                                        <div class="mt-card-content">
                                            <h3 class="mt-card-name">Za1d3</h3>
                                            <p class="mt-card-desc font-grey-mint"></p>
                                            <div class="mt-card-social">
                                                <ul>
                                                                                                                                                                                                                                                                        <li>
                                                            <a href="http://forum.royalroadl.com/private.php?action=send&recipent=8357">
                                                                <i class="fa fa-envelope"></i>
                                                            </a>
                                                        </li>
                                                    <li>
                                                        <a href="//royalroadl.com/user/profile/8357">
                                                            <i class="fa fa-user"></i>
                                                        </a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <!--START ACHIEVEMENT-->
                            <div class="portlet-title">
                                <div class="caption">
                                    <i class="fa fa-trophy"></i>
                                    <span class="caption-subject bold uppercase">Achievements</span>
                                </div>
                            </div>
                            <div class="portlet-body">
                                <div class="row">
                                </div>
                                <!--END ACHIEVEMENTS-->
                            </div>
                        </div>
                        <!--START USER SIDEBAR CARD-->
                            <div class="portlet light profile-sidebar-portlet text-center ac" style="padding-top: 5px !important;">
                                <h6 class="bold uppercase">Advertisement</h6>
                                <div class="square text-center">
                                    <!-- /268575356/RR_Post_Header_Mid -->
<div id='div-gpt-ad-1470935423061-12'>
<script type='text/javascript'>
if(window.innerWidth<991) {googletag.cmd.push(function() { googletag.display('div-gpt-ad-1470935423061-12'); });}
</script>
</div>

                                </div>
                            </div>
                        <!--END USER SIDEBAR CARD-->
                    </div>
                    <!-- END MOBILE OPTIONS -->
                    <!--START TOC PORTLET-->
                    <div class="portlet light">
                        <div class="portlet-title">
                            <div class="caption">
                                <a id="toc"></a>
                                <i class="fa fa-book font-red-sunglo"></i>
                                <span class="caption-subject bold uppercase font-red-sunglo">Table of Contents</span>
                            </div>
                        </div>
                        <div class="portlet-body">
                            <table class="table no-border" id="chapters">
                                <thead>
                                    <tr>
                                        <th data-priority="1">
                                            Chapter Name
                                        </th>
                                        <th class="text-right min-tablet-p" data-priority="2">
                                            Release Date
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11117/prologue-chapter-1">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11117/prologue-chapter-1">
                                                    Prologue + Chapter 1
                                                </a>
                                            </td>
                                            <td data-order="0" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11117/prologue-chapter-1">
                                                    <time datetime="2/21/2015 12:00:00 AM" unixtime="1424513613" format="ago">2/21/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11192/chapter-2-once-again">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11192/chapter-2-once-again">
                                                    Chapter 2 - Once Again
                                                </a>
                                            </td>
                                            <td data-order="1" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11192/chapter-2-once-again">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424583019" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11193/chapter-3-adalina">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11193/chapter-3-adalina">
                                                    Chapter 3 – Adalina
                                                </a>
                                            </td>
                                            <td data-order="2" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11193/chapter-3-adalina">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424583265" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11196/chapter-4-flow-of-mana">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11196/chapter-4-flow-of-mana">
                                                    Chapter 4 - Flow of Mana
                                                </a>
                                            </td>
                                            <td data-order="3" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11196/chapter-4-flow-of-mana">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424584764" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11197/chapter-5-the-road">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11197/chapter-5-the-road">
                                                    Chapter 5 - The Road
                                                </a>
                                            </td>
                                            <td data-order="4" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11197/chapter-5-the-road">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424585818" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11205/chapter-6-aftermath">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11205/chapter-6-aftermath">
                                                    Chapter 6 - Aftermath
                                                </a>
                                            </td>
                                            <td data-order="5" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11205/chapter-6-aftermath">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424587223" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11209/chapter-7-ferrent">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11209/chapter-7-ferrent">
                                                    Chapter 7 - Ferrent
                                                </a>
                                            </td>
                                            <td data-order="6" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11209/chapter-7-ferrent">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424588649" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11210/chapter-8-decisions">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11210/chapter-8-decisions">
                                                    Chapter 8 - Decisions
                                                </a>
                                            </td>
                                            <td data-order="7" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11210/chapter-8-decisions">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424589674" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11215/chapter-9-kaidus">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11215/chapter-9-kaidus">
                                                    Chapter 9 - Kaidus
                                                </a>
                                            </td>
                                            <td data-order="8" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11215/chapter-9-kaidus">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424591003" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11246/chapter-10-savior">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11246/chapter-10-savior">
                                                    Chapter 10 - Savior
                                                </a>
                                            </td>
                                            <td data-order="9" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11246/chapter-10-savior">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424626936" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11247/chapter-11-confrontation">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11247/chapter-11-confrontation">
                                                    Chapter 11 - Confrontation
                                                </a>
                                            </td>
                                            <td data-order="10" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11247/chapter-11-confrontation">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424628134" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11251/chapter-12-new-road">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11251/chapter-12-new-road">
                                                    Chapter 12 - New Road
                                                </a>
                                            </td>
                                            <td data-order="11" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11251/chapter-12-new-road">
                                                    <time datetime="2/22/2015 12:00:00 AM" unixtime="1424629914" format="ago">2/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11278/chapter-13-encounter">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11278/chapter-13-encounter">
                                                    Chapter 13 - Encounter
                                                </a>
                                            </td>
                                            <td data-order="12" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11278/chapter-13-encounter">
                                                    <time datetime="2/23/2015 12:00:00 AM" unixtime="1424649783" format="ago">2/23/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11296/chapter-14-dvitus">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11296/chapter-14-dvitus">
                                                    Chapter 14 - Dvitus
                                                </a>
                                            </td>
                                            <td data-order="13" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11296/chapter-14-dvitus">
                                                    <time datetime="2/23/2015 12:00:00 AM" unixtime="1424670646" format="ago">2/23/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11306/interlude-thank-you">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11306/interlude-thank-you">
                                                    Interlude - thank you
                                                </a>
                                            </td>
                                            <td data-order="14" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11306/interlude-thank-you">
                                                    <time datetime="2/23/2015 12:00:00 AM" unixtime="1424680872" format="ago">2/23/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11347/chapter-15-zorin-academy">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11347/chapter-15-zorin-academy">
                                                    Chapter 15 - Zorin Academy
                                                </a>
                                            </td>
                                            <td data-order="15" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11347/chapter-15-zorin-academy">
                                                    <time datetime="2/23/2015 12:00:00 AM" unixtime="1424722296" format="ago">2/23/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11365/chapter-16-summoning">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11365/chapter-16-summoning">
                                                    Chapter 16 - Summoning
                                                </a>
                                            </td>
                                            <td data-order="16" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11365/chapter-16-summoning">
                                                    <time datetime="2/24/2015 12:00:00 AM" unixtime="1424745607" format="ago">2/24/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11415/chapter-17-the-price-of-conceit">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11415/chapter-17-the-price-of-conceit">
                                                    Chapter 17 - The Price of Conceit
                                                </a>
                                            </td>
                                            <td data-order="17" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11415/chapter-17-the-price-of-conceit">
                                                    <time datetime="2/24/2015 12:00:00 AM" unixtime="1424809832" format="ago">2/24/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11512/chapter-18-inherent-darkness">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11512/chapter-18-inherent-darkness">
                                                    Chapter 18 - Inherent Darkness
                                                </a>
                                            </td>
                                            <td data-order="18" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11512/chapter-18-inherent-darkness">
                                                    <time datetime="2/25/2015 12:00:00 AM" unixtime="1424893055" format="ago">2/25/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11590/chapter-19-family">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11590/chapter-19-family">
                                                    Chapter 19 - Family
                                                </a>
                                            </td>
                                            <td data-order="19" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11590/chapter-19-family">
                                                    <time datetime="2/26/2015 12:00:00 AM" unixtime="1424984004" format="ago">2/26/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11647/chapter-20-lord-varath">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11647/chapter-20-lord-varath">
                                                    Chapter 20 - Lord Varath
                                                </a>
                                            </td>
                                            <td data-order="20" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11647/chapter-20-lord-varath">
                                                    <time datetime="2/27/2015 12:00:00 AM" unixtime="1425056336" format="ago">2/27/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11749/chapter-21-revelations">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11749/chapter-21-revelations">
                                                    Chapter 21 - Revelations
                                                </a>
                                            </td>
                                            <td data-order="21" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11749/chapter-21-revelations">
                                                    <time datetime="3/1/2015 12:00:00 AM" unixtime="1425187954" format="ago">3/1/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/11901/chapter-22-new-classes">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/11901/chapter-22-new-classes">
                                                    Chapter 22 - New Classes
                                                </a>
                                            </td>
                                            <td data-order="22" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/11901/chapter-22-new-classes">
                                                    <time datetime="3/3/2015 12:00:00 AM" unixtime="1425369318" format="ago">3/3/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/12074/chapter-23-council">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/12074/chapter-23-council">
                                                    Chapter 23 - Council
                                                </a>
                                            </td>
                                            <td data-order="23" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/12074/chapter-23-council">
                                                    <time datetime="3/5/2015 12:00:00 AM" unixtime="1425581054" format="ago">3/5/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/12121/the-world">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/12121/the-world">
                                                    The World
                                                </a>
                                            </td>
                                            <td data-order="24" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/12121/the-world">
                                                    <time datetime="3/6/2015 12:00:00 AM" unixtime="1425626581" format="ago">3/6/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/12325/chapter-24-the-rjus">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/12325/chapter-24-the-rjus">
                                                    Chapter 24 - The Rjus
                                                </a>
                                            </td>
                                            <td data-order="25" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/12325/chapter-24-the-rjus">
                                                    <time datetime="3/8/2015 12:00:00 AM" unixtime="1425847493" format="ago">3/8/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/12546/chapter-25-in-the-shadows">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/12546/chapter-25-in-the-shadows">
                                                    chapter 25 - In the Shadows
                                                </a>
                                            </td>
                                            <td data-order="26" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/12546/chapter-25-in-the-shadows">
                                                    <time datetime="3/12/2015 12:00:00 AM" unixtime="1426120060" format="ago">3/12/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/12653/chapter-26-monsters">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/12653/chapter-26-monsters">
                                                    Chapter 26 - Monsters
                                                </a>
                                            </td>
                                            <td data-order="27" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/12653/chapter-26-monsters">
                                                    <time datetime="3/13/2015 12:00:00 AM" unixtime="1426228852" format="ago">3/13/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/12816/chapter-27-consequences">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/12816/chapter-27-consequences">
                                                    Chapter 27 - Consequences
                                                </a>
                                            </td>
                                            <td data-order="28" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/12816/chapter-27-consequences">
                                                    <time datetime="3/14/2015 12:00:00 AM" unixtime="1426372397" format="ago">3/14/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/12925/chapter-28-celene">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/12925/chapter-28-celene">
                                                    Chapter 28 - Celene
                                                </a>
                                            </td>
                                            <td data-order="29" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/12925/chapter-28-celene">
                                                    <time datetime="3/16/2015 12:00:00 AM" unixtime="1426487777" format="ago">3/16/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/13044/chapter-29-miracles">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/13044/chapter-29-miracles">
                                                    Chapter 29 - Miracles
                                                </a>
                                            </td>
                                            <td data-order="30" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/13044/chapter-29-miracles">
                                                    <time datetime="3/17/2015 12:00:00 AM" unixtime="1426579447" format="ago">3/17/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/13642/chapter-30-peaceful-days">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/13642/chapter-30-peaceful-days">
                                                    Chapter 30 - Peaceful days
                                                </a>
                                            </td>
                                            <td data-order="31" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/13642/chapter-30-peaceful-days">
                                                    <time datetime="3/23/2015 12:00:00 AM" unixtime="1427093413" format="ago">3/23/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/13875/chapter-31-return-to-zorin">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/13875/chapter-31-return-to-zorin">
                                                    Chapter 31 - Return to Zorin
                                                </a>
                                            </td>
                                            <td data-order="32" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/13875/chapter-31-return-to-zorin">
                                                    <time datetime="3/25/2015 12:00:00 AM" unixtime="1427272156" format="ago">3/25/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/14130/chapter-32-talhrus">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/14130/chapter-32-talhrus">
                                                    Chapter 32 - Tal&#39;hrus
                                                </a>
                                            </td>
                                            <td data-order="33" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/14130/chapter-32-talhrus">
                                                    <time datetime="3/28/2015 12:00:00 AM" unixtime="1427518307" format="ago">3/28/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/14132/chapter-33-true-terror">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/14132/chapter-33-true-terror">
                                                    Chapter 33 - True Terror
                                                </a>
                                            </td>
                                            <td data-order="34" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/14132/chapter-33-true-terror">
                                                    <time datetime="3/28/2015 12:00:00 AM" unixtime="1427522392" format="ago">3/28/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/14525/chapter-34-anise">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/14525/chapter-34-anise">
                                                    Chapter 34 - Anise
                                                </a>
                                            </td>
                                            <td data-order="35" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/14525/chapter-34-anise">
                                                    <time datetime="4/1/2015 12:00:00 AM" unixtime="1427854993" format="ago">4/1/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/15234/chapter-35-contact">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/15234/chapter-35-contact">
                                                    Chapter 35 - Contact
                                                </a>
                                            </td>
                                            <td data-order="36" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/15234/chapter-35-contact">
                                                    <time datetime="4/8/2015 12:00:00 AM" unixtime="1428467838" format="ago">4/8/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/15359/chapter-36-zavon">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/15359/chapter-36-zavon">
                                                    Chapter 36 - Zavon
                                                </a>
                                            </td>
                                            <td data-order="37" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/15359/chapter-36-zavon">
                                                    <time datetime="4/9/2015 12:00:00 AM" unixtime="1428561907" format="ago">4/9/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/15592/chapter-37-the-calm">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/15592/chapter-37-the-calm">
                                                    Chapter 37 - The Calm
                                                </a>
                                            </td>
                                            <td data-order="38" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/15592/chapter-37-the-calm">
                                                    <time datetime="4/11/2015 12:00:00 AM" unixtime="1428776252" format="ago">4/11/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/15925/chapter-38-winds-of-carnage">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/15925/chapter-38-winds-of-carnage">
                                                    Chapter 38 - Winds of Carnage
                                                </a>
                                            </td>
                                            <td data-order="39" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/15925/chapter-38-winds-of-carnage">
                                                    <time datetime="4/15/2015 12:00:00 AM" unixtime="1429072716" format="ago">4/15/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/16150/chapter-39-storm-of-blood">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/16150/chapter-39-storm-of-blood">
                                                    Chapter 39 - Storm of Blood
                                                </a>
                                            </td>
                                            <td data-order="40" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/16150/chapter-39-storm-of-blood">
                                                    <time datetime="4/17/2015 12:00:00 AM" unixtime="1429255521" format="ago">4/17/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/16680/chapter-40-forest-encounter">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/16680/chapter-40-forest-encounter">
                                                    Chapter 40 - Forest Encounter
                                                </a>
                                            </td>
                                            <td data-order="41" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/16680/chapter-40-forest-encounter">
                                                    <time datetime="4/22/2015 12:00:00 AM" unixtime="1429669895" format="ago">4/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/16708/chapter-41-happenings">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/16708/chapter-41-happenings">
                                                    Chapter 41 - Happenings
                                                </a>
                                            </td>
                                            <td data-order="42" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/16708/chapter-41-happenings">
                                                    <time datetime="4/22/2015 12:00:00 AM" unixtime="1429693065" format="ago">4/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/17311/chapter-42-return">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/17311/chapter-42-return">
                                                    Chapter 42 - Return
                                                </a>
                                            </td>
                                            <td data-order="43" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/17311/chapter-42-return">
                                                    <time datetime="4/28/2015 12:00:00 AM" unixtime="1430203855" format="ago">4/28/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/17891/chapter-43-innocent-ties">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/17891/chapter-43-innocent-ties">
                                                    Chapter 43 - Innocent Ties
                                                </a>
                                            </td>
                                            <td data-order="44" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/17891/chapter-43-innocent-ties">
                                                    <time datetime="5/3/2015 12:00:00 AM" unixtime="1430690219" format="ago">5/3/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/18101/chapter-44-pride-joy">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/18101/chapter-44-pride-joy">
                                                    Chapter 44 - Pride &amp; Joy
                                                </a>
                                            </td>
                                            <td data-order="45" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/18101/chapter-44-pride-joy">
                                                    <time datetime="5/5/2015 12:00:00 AM" unixtime="1430861952" format="ago">5/5/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/18649/chapter-45-hidden-gem">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/18649/chapter-45-hidden-gem">
                                                    Chapter 45 - Hidden Gem
                                                </a>
                                            </td>
                                            <td data-order="46" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/18649/chapter-45-hidden-gem">
                                                    <time datetime="5/12/2015 12:00:00 AM" unixtime="1431403330" format="ago">5/12/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/18965/chapter-46-sealed-book">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/18965/chapter-46-sealed-book">
                                                    Chapter 46 - Sealed Book
                                                </a>
                                            </td>
                                            <td data-order="47" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/18965/chapter-46-sealed-book">
                                                    <time datetime="5/15/2015 12:00:00 AM" unixtime="1431673676" format="ago">5/15/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/19266/chapter-47-selfish-request">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/19266/chapter-47-selfish-request">
                                                    Chapter 47 - Selfish Request
                                                </a>
                                            </td>
                                            <td data-order="48" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/19266/chapter-47-selfish-request">
                                                    <time datetime="5/17/2015 12:00:00 AM" unixtime="1431896233" format="ago">5/17/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/19615/chapter-48-year-after">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/19615/chapter-48-year-after">
                                                    Chapter 48 - Year After
                                                </a>
                                            </td>
                                            <td data-order="49" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/19615/chapter-48-year-after">
                                                    <time datetime="5/21/2015 12:00:00 AM" unixtime="1432186331" format="ago">5/21/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/21089/b2-prologue-chapter-1">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/21089/b2-prologue-chapter-1">
                                                    B2 Prologue + Chapter 1
                                                </a>
                                            </td>
                                            <td data-order="50" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/21089/b2-prologue-chapter-1">
                                                    <time datetime="6/3/2015 12:00:00 AM" unixtime="1433368880" format="ago">6/3/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/21454/b2-chapter-2-homecoming">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/21454/b2-chapter-2-homecoming">
                                                    B2 Chapter 2 - Homecoming
                                                </a>
                                            </td>
                                            <td data-order="51" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/21454/b2-chapter-2-homecoming">
                                                    <time datetime="6/6/2015 12:00:00 AM" unixtime="1433633805" format="ago">6/6/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/21902/b2-chapter-3-annual-arms-competition-ii">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/21902/b2-chapter-3-annual-arms-competition-ii">
                                                    B2 Chapter 3 - Annual Arms Competition II
                                                </a>
                                            </td>
                                            <td data-order="52" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/21902/b2-chapter-3-annual-arms-competition-ii">
                                                    <time datetime="6/11/2015 12:00:00 AM" unixtime="1433984767" format="ago">6/11/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/22640/b2-chapter-4-awakening">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/22640/b2-chapter-4-awakening">
                                                    B2 Chapter 4 - Awakening
                                                </a>
                                            </td>
                                            <td data-order="53" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/22640/b2-chapter-4-awakening">
                                                    <time datetime="6/17/2015 12:00:00 AM" unixtime="1434560642" format="ago">6/17/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/23229/b2-chapter-5-courage">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/23229/b2-chapter-5-courage">
                                                    B2 Chapter 5 - Courage
                                                </a>
                                            </td>
                                            <td data-order="54" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/23229/b2-chapter-5-courage">
                                                    <time datetime="6/23/2015 12:00:00 AM" unixtime="1435046242" format="ago">6/23/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/23864/b2-chapter-6-the-13th-ward">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/23864/b2-chapter-6-the-13th-ward">
                                                    B2 Chapter 6 - The 13th Ward
                                                </a>
                                            </td>
                                            <td data-order="55" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/23864/b2-chapter-6-the-13th-ward">
                                                    <time datetime="6/29/2015 12:00:00 AM" unixtime="1435546537" format="ago">6/29/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/24325/b2-chapter-7-the-silent-one">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/24325/b2-chapter-7-the-silent-one">
                                                    B2 Chapter 7 - The Silent One
                                                </a>
                                            </td>
                                            <td data-order="56" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/24325/b2-chapter-7-the-silent-one">
                                                    <time datetime="7/3/2015 12:00:00 AM" unixtime="1435888882" format="ago">7/3/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/24842/b2-chapter-8-uninvited-guest">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/24842/b2-chapter-8-uninvited-guest">
                                                    B2 Chapter 8 - Uninvited Guest
                                                </a>
                                            </td>
                                            <td data-order="57" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/24842/b2-chapter-8-uninvited-guest">
                                                    <time datetime="7/7/2015 12:00:00 AM" unixtime="1436307038" format="ago">7/7/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/25461/b2-chapter-9-unspoken-words">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/25461/b2-chapter-9-unspoken-words">
                                                    B2 Chapter 9 - Unspoken Words
                                                </a>
                                            </td>
                                            <td data-order="58" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/25461/b2-chapter-9-unspoken-words">
                                                    <time datetime="7/14/2015 12:00:00 AM" unixtime="1436847492" format="ago">7/14/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/26198/b2-chapter-10-foreign-land">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/26198/b2-chapter-10-foreign-land">
                                                    B2 Chapter 10 - Foreign Land
                                                </a>
                                            </td>
                                            <td data-order="59" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/26198/b2-chapter-10-foreign-land">
                                                    <time datetime="7/21/2015 12:00:00 AM" unixtime="1437440198" format="ago">7/21/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/26706/b2-chapter-11-hunters-and-hunted">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/26706/b2-chapter-11-hunters-and-hunted">
                                                    B2 Chapter 11 - Hunters and Hunted
                                                </a>
                                            </td>
                                            <td data-order="60" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/26706/b2-chapter-11-hunters-and-hunted">
                                                    <time datetime="7/26/2015 12:00:00 AM" unixtime="1437885054" format="ago">7/26/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/27396/b2-chapter-12-reconsideration">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/27396/b2-chapter-12-reconsideration">
                                                    B2 Chapter 12 - Reconsideration
                                                </a>
                                            </td>
                                            <td data-order="61" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/27396/b2-chapter-12-reconsideration">
                                                    <time datetime="8/1/2015 12:00:00 AM" unixtime="1438472981" format="ago">8/1/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/28034/b2-chapter-13-lifetime-of-regret">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/28034/b2-chapter-13-lifetime-of-regret">
                                                    B2 Chapter 13 - Lifetime of Regret
                                                </a>
                                            </td>
                                            <td data-order="62" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/28034/b2-chapter-13-lifetime-of-regret">
                                                    <time datetime="8/8/2015 12:00:00 AM" unixtime="1439006048" format="ago">8/8/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/28363/b2-chapter-14-nyzacus-mirror">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/28363/b2-chapter-14-nyzacus-mirror">
                                                    B2 Chapter 14 - Nyzacus Mirror
                                                </a>
                                            </td>
                                            <td data-order="63" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/28363/b2-chapter-14-nyzacus-mirror">
                                                    <time datetime="8/11/2015 12:00:00 AM" unixtime="1439252752" format="ago">8/11/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/29238/b2-chapter-15-farewells">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/29238/b2-chapter-15-farewells">
                                                    B2 Chapter 15 - Farewells
                                                </a>
                                            </td>
                                            <td data-order="64" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/29238/b2-chapter-15-farewells">
                                                    <time datetime="8/18/2015 12:00:00 AM" unixtime="1439890495" format="ago">8/18/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/29968/b2-chapter-16-secrets">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/29968/b2-chapter-16-secrets">
                                                    B2 Chapter 16 - Secrets
                                                </a>
                                            </td>
                                            <td data-order="65" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/29968/b2-chapter-16-secrets">
                                                    <time datetime="8/25/2015 12:00:00 AM" unixtime="1440490285" format="ago">8/25/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/30830/b2-chapter-17-echoing-rage">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/30830/b2-chapter-17-echoing-rage">
                                                    B2 Chapter 17 - Echoing Rage
                                                </a>
                                            </td>
                                            <td data-order="66" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/30830/b2-chapter-17-echoing-rage">
                                                    <time datetime="9/1/2015 12:00:00 AM" unixtime="1441130665" format="ago">9/1/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/31600/b2-chapter-18-the-unforgiving-one">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/31600/b2-chapter-18-the-unforgiving-one">
                                                    B2 Chapter 18 - The Unforgiving One
                                                </a>
                                            </td>
                                            <td data-order="67" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/31600/b2-chapter-18-the-unforgiving-one">
                                                    <time datetime="9/8/2015 12:00:00 AM" unixtime="1441733516" format="ago">9/8/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/32445/b2-chapter-19-hunter">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/32445/b2-chapter-19-hunter">
                                                    B2 Chapter 19 - Hunter
                                                </a>
                                            </td>
                                            <td data-order="68" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/32445/b2-chapter-19-hunter">
                                                    <time datetime="9/16/2015 12:00:00 AM" unixtime="1442371043" format="ago">9/16/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/33309/b2-chapter-20-the-tides-of-change">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/33309/b2-chapter-20-the-tides-of-change">
                                                    B2 Chapter 20 - The Tides of Change
                                                </a>
                                            </td>
                                            <td data-order="69" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/33309/b2-chapter-20-the-tides-of-change">
                                                    <time datetime="9/22/2015 12:00:00 AM" unixtime="1442937319" format="ago">9/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/34236/b2-chapter-21-guardian">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/34236/b2-chapter-21-guardian">
                                                    B2 Chapter 21 - Guardian
                                                </a>
                                            </td>
                                            <td data-order="70" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/34236/b2-chapter-21-guardian">
                                                    <time datetime="9/29/2015 12:00:00 AM" unixtime="1443559578" format="ago">9/29/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/34623/b2-chapter-22-hidden-daggers">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/34623/b2-chapter-22-hidden-daggers">
                                                    B2 Chapter 22 - Hidden Daggers
                                                </a>
                                            </td>
                                            <td data-order="71" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/34623/b2-chapter-22-hidden-daggers">
                                                    <time datetime="10/3/2015 12:00:00 AM" unixtime="1443862528" format="ago">10/3/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/35508/b2-chapter-23-aristolk">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/35508/b2-chapter-23-aristolk">
                                                    B2 Chapter 23 - Aristolk
                                                </a>
                                            </td>
                                            <td data-order="72" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/35508/b2-chapter-23-aristolk">
                                                    <time datetime="10/10/2015 12:00:00 AM" unixtime="1444448755" format="ago">10/10/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/36438/b2-chapter-24-uneventful-voyage">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/36438/b2-chapter-24-uneventful-voyage">
                                                    B2 Chapter 24 - Uneventful Voyage
                                                </a>
                                            </td>
                                            <td data-order="73" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/36438/b2-chapter-24-uneventful-voyage">
                                                    <time datetime="10/17/2015 12:00:00 AM" unixtime="1445072744" format="ago">10/17/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/37274/b2-chapter-25-malpaars">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/37274/b2-chapter-25-malpaars">
                                                    B2 Chapter 25 - Malpaars
                                                </a>
                                            </td>
                                            <td data-order="74" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/37274/b2-chapter-25-malpaars">
                                                    <time datetime="10/24/2015 12:00:00 AM" unixtime="1445667827" format="ago">10/24/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/38452/b2-chapter-26-a-corrupted-land">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/38452/b2-chapter-26-a-corrupted-land">
                                                    B2 Chapter 26 - A Corrupted Land
                                                </a>
                                            </td>
                                            <td data-order="75" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/38452/b2-chapter-26-a-corrupted-land">
                                                    <time datetime="11/1/2015 12:00:00 AM" unixtime="1446368309" format="ago">11/1/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/39148/b2-chapter-27-pestilence">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/39148/b2-chapter-27-pestilence">
                                                    B2 Chapter 27 - Pestilence
                                                </a>
                                            </td>
                                            <td data-order="76" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/39148/b2-chapter-27-pestilence">
                                                    <time datetime="11/6/2015 12:00:00 AM" unixtime="1446787641" format="ago">11/6/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/40119/b2-chapter-28-a-corrupted-land-ii">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/40119/b2-chapter-28-a-corrupted-land-ii">
                                                    B2 Chapter 28 - A Corrupted Land II
                                                </a>
                                            </td>
                                            <td data-order="77" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/40119/b2-chapter-28-a-corrupted-land-ii">
                                                    <time datetime="11/13/2015 12:00:00 AM" unixtime="1447408106" format="ago">11/13/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/40880/b2-chapter-29-meeting-of-five">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/40880/b2-chapter-29-meeting-of-five">
                                                    B2 Chapter 29 - Meeting of Five
                                                </a>
                                            </td>
                                            <td data-order="78" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/40880/b2-chapter-29-meeting-of-five">
                                                    <time datetime="11/19/2015 12:00:00 AM" unixtime="1447972369" format="ago">11/19/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/41956/b2-chapter-30-brotherhood">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/41956/b2-chapter-30-brotherhood">
                                                    B2 Chapter 30 - Brotherhood
                                                </a>
                                            </td>
                                            <td data-order="79" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/41956/b2-chapter-30-brotherhood">
                                                    <time datetime="11/27/2015 12:00:00 AM" unixtime="1448657743" format="ago">11/27/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/42923/b2-chapter-31-esperen">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/42923/b2-chapter-31-esperen">
                                                    B2 Chapter 31 - Esperen
                                                </a>
                                            </td>
                                            <td data-order="80" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/42923/b2-chapter-31-esperen">
                                                    <time datetime="12/4/2015 12:00:00 AM" unixtime="1449231129" format="ago">12/4/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/43765/b2-chapter-32-weapon-of-compassion">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/43765/b2-chapter-32-weapon-of-compassion">
                                                    B2 Chapter 32 – Weapon of Compassion
                                                </a>
                                            </td>
                                            <td data-order="81" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/43765/b2-chapter-32-weapon-of-compassion">
                                                    <time datetime="12/10/2015 12:00:00 AM" unixtime="1449723055" format="ago">12/10/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/44757/b2-chapter-33-resolve">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/44757/b2-chapter-33-resolve">
                                                    B2 Chapter 33 - Resolve
                                                </a>
                                            </td>
                                            <td data-order="82" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/44757/b2-chapter-33-resolve">
                                                    <time datetime="12/17/2015 12:00:00 AM" unixtime="1450328788" format="ago">12/17/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/45605/b2-chapter-34-price-of-a-life">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/45605/b2-chapter-34-price-of-a-life">
                                                    B2 Chapter 34 - Price of a Life
                                                </a>
                                            </td>
                                            <td data-order="83" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/45605/b2-chapter-34-price-of-a-life">
                                                    <time datetime="12/22/2015 12:00:00 AM" unixtime="1450828195" format="ago">12/22/2015</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/47129/b2-chapter-35-floating-city-vilute">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/47129/b2-chapter-35-floating-city-vilute">
                                                    B2 Chapter 35 - Floating City Vilute
                                                </a>
                                            </td>
                                            <td data-order="84" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/47129/b2-chapter-35-floating-city-vilute">
                                                    <time datetime="1/2/2016 12:00:00 AM" unixtime="1451734405" format="ago">1/2/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/48350/b2-chapter-36-a-godless-world">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/48350/b2-chapter-36-a-godless-world">
                                                    B2 Chapter 36 - A Godless World
                                                </a>
                                            </td>
                                            <td data-order="85" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/48350/b2-chapter-36-a-godless-world">
                                                    <time datetime="1/10/2016 12:00:00 AM" unixtime="1452420536" format="ago">1/10/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/49597/b2-chapter-37-despair">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/49597/b2-chapter-37-despair">
                                                    B2 Chapter 37 - Despair
                                                </a>
                                            </td>
                                            <td data-order="86" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/49597/b2-chapter-37-despair">
                                                    <time datetime="1/18/2016 12:00:00 AM" unixtime="1453116879" format="ago">1/18/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/50907/b2-chapter-38-the-hands-of-fate">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/50907/b2-chapter-38-the-hands-of-fate">
                                                    B2 Chapter 38 - The Hands of Fate
                                                </a>
                                            </td>
                                            <td data-order="87" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/50907/b2-chapter-38-the-hands-of-fate">
                                                    <time datetime="1/27/2016 12:00:00 AM" unixtime="1453866470" format="ago">1/27/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/51994/b2-chapter-39-family-bonds">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/51994/b2-chapter-39-family-bonds">
                                                    B2 Chapter 39 - Family Bonds
                                                </a>
                                            </td>
                                            <td data-order="88" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/51994/b2-chapter-39-family-bonds">
                                                    <time datetime="2/3/2016 12:00:00 AM" unixtime="1454467965" format="ago">2/3/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/53130/b2-chapter-40-he-who-binds">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/53130/b2-chapter-40-he-who-binds">
                                                    B2 Chapter 40 - He Who Binds
                                                </a>
                                            </td>
                                            <td data-order="89" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/53130/b2-chapter-40-he-who-binds">
                                                    <time datetime="2/10/2016 12:00:00 AM" unixtime="1455093863" format="ago">2/10/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/54433/b2-chapter-41-names">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/54433/b2-chapter-41-names">
                                                    B2 Chapter 41 - Names
                                                </a>
                                            </td>
                                            <td data-order="90" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/54433/b2-chapter-41-names">
                                                    <time datetime="2/17/2016 12:00:00 AM" unixtime="1455739280" format="ago">2/17/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/55533/b2-chapter-42-heroes">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/55533/b2-chapter-42-heroes">
                                                    B2 Chapter 42 - Heroes
                                                </a>
                                            </td>
                                            <td data-order="91" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/55533/b2-chapter-42-heroes">
                                                    <time datetime="2/25/2016 12:00:00 AM" unixtime="1456375899" format="ago">2/25/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/56761/b2-chapter-43-revenge">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/56761/b2-chapter-43-revenge">
                                                    B2 Chapter 43 - Revenge
                                                </a>
                                            </td>
                                            <td data-order="92" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/56761/b2-chapter-43-revenge">
                                                    <time datetime="3/3/2016 12:00:00 AM" unixtime="1456973167" format="ago">3/3/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/61773/b2-chapter-44-maverus">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/61773/b2-chapter-44-maverus">
                                                    B2 Chapter 44 - Maverus
                                                </a>
                                            </td>
                                            <td data-order="93" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/61773/b2-chapter-44-maverus">
                                                    <time datetime="3/30/2016 12:00:00 AM" unixtime="1459364128" format="ago">3/30/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/64202/b2-chapter-45-fools-errand">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/64202/b2-chapter-45-fools-errand">
                                                    B2 Chapter 45 - Fool&#39;s Errand
                                                </a>
                                            </td>
                                            <td data-order="94" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/64202/b2-chapter-45-fools-errand">
                                                    <time datetime="4/12/2016 12:00:00 AM" unixtime="1460447436" format="ago">4/12/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/66665/b2-chapter-46-frozen-cogs-of-revolution">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/66665/b2-chapter-46-frozen-cogs-of-revolution">
                                                    B2 Chapter 46 - Frozen Cogs of Revolution
                                                </a>
                                            </td>
                                            <td data-order="95" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/66665/b2-chapter-46-frozen-cogs-of-revolution">
                                                    <time datetime="4/23/2016 12:00:00 AM" unixtime="1461453115" format="ago">4/23/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/72937/b2-chapter-47-blind-rivalry">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/72937/b2-chapter-47-blind-rivalry">
                                                    B2 Chapter 47 - Blind Rivalry
                                                </a>
                                            </td>
                                            <td data-order="96" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/72937/b2-chapter-47-blind-rivalry">
                                                    <time datetime="5/28/2016 12:00:00 AM" unixtime="1464479846" format="ago">5/28/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/76196/b2-chapter-48-chains-of-garnikul">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/76196/b2-chapter-48-chains-of-garnikul">
                                                    B2 Chapter 48 - Chains of Garnikul
                                                </a>
                                            </td>
                                            <td data-order="97" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/76196/b2-chapter-48-chains-of-garnikul">
                                                    <time datetime="6/15/2016 12:00:00 AM" unixtime="1465959586" format="ago">6/15/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/104476/fork-in-the-road-a-late-b2-chapter-49">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/104476/fork-in-the-road-a-late-b2-chapter-49">
                                                    Fork in the road + a late B2 Chapter 49
                                                </a>
                                            </td>
                                            <td data-order="98" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/104476/fork-in-the-road-a-late-b2-chapter-49">
                                                    <time datetime="11/25/2016 12:00:00 AM" unixtime="1480055616" format="ago">11/25/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/104483/b2-chapter-50-advent-of-the-demon">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/104483/b2-chapter-50-advent-of-the-demon">
                                                    B2 Chapter 50 - Advent of the Demon
                                                </a>
                                            </td>
                                            <td data-order="99" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/104483/b2-chapter-50-advent-of-the-demon">
                                                    <time datetime="11/25/2016 12:00:00 AM" unixtime="1480064189" format="ago">11/25/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/106220/b2-chapter-51-detour">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/106220/b2-chapter-51-detour">
                                                    B2 Chapter 51 - Detour
                                                </a>
                                            </td>
                                            <td data-order="100" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/106220/b2-chapter-51-detour">
                                                    <time datetime="12/5/2016 12:00:00 AM" unixtime="1480963243" format="ago">12/5/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/107457/b2-chapter-52-formless-azurite">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/107457/b2-chapter-52-formless-azurite">
                                                    B2 Chapter 52 - Formless Azurite
                                                </a>
                                            </td>
                                            <td data-order="101" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/107457/b2-chapter-52-formless-azurite">
                                                    <time datetime="12/13/2016 12:00:00 AM" unixtime="1481661933" format="ago">12/13/2016</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/110308/b2-chapter-53-reunion-of-fates">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/110308/b2-chapter-53-reunion-of-fates">
                                                    B2 Chapter 53 - Reunion of Fates
                                                </a>
                                            </td>
                                            <td data-order="102" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/110308/b2-chapter-53-reunion-of-fates">
                                                    <time datetime="1/1/2017 12:00:00 AM" unixtime="1483254885" format="ago">1/1/2017</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/112118/b2-chapter-54-new-dawn">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/112118/b2-chapter-54-new-dawn">
                                                    B2 Chapter 54 - New Dawn
                                                </a>
                                            </td>
                                            <td data-order="103" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/112118/b2-chapter-54-new-dawn">
                                                    <time datetime="1/12/2017 12:00:00 AM" unixtime="1484195602" format="ago">1/12/2017</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/114363/b2-chapter-55-new-dawn-ii">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/114363/b2-chapter-55-new-dawn-ii">
                                                    B2 Chapter 55 - New Dawn II
                                                </a>
                                            </td>
                                            <td data-order="104" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/114363/b2-chapter-55-new-dawn-ii">
                                                    <time datetime="1/23/2017 12:00:00 AM" unixtime="1485169248" format="ago">1/23/2017</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                        <tr style="cursor: pointer" data-url="/fiction/1439/forgotten-conqueror/chapter/118164/b2-chapter-56-truth">
                                            <td>
                                                <a href="/fiction/1439/forgotten-conqueror/chapter/118164/b2-chapter-56-truth">
                                                    B2 Chapter 56 - Truth
                                                </a>
                                            </td>
                                            <td data-order="105" class="text-right">
                                                <a class="/fiction/1439/forgotten-conqueror/chapter/118164/b2-chapter-56-truth">
                                                    <time datetime="2/11/2017 12:00:00 AM" unixtime="1486787145" format="ago">2/11/2017</time> ago
                                                </a>
                                            </td>
                                        </tr>
                                </tbody>
                            </table>
                        </div>
                    </div><!--END TOC PORTLET-->
                    <!--START REVIEW PORTLET-->
                    <div class="portlet light reviews">
                        <div class="portlet-title">
                            <div class="caption">
                                <i class="fa fa-quote-left"></i>
                                <span class="caption-subject bold uppercase font-red-sunglo">Reviews</span>
                            </div>
                        </div>
                        <div class="portlet-body">

                                <div class="review-new portlet">
                                    <div class="portlet-title">
                                        <h4 class="bold uppercase font-red-sunglo">Leave a review</h4>
                                    </div>
                                    <div class="portlet-body form">
                                        <form method="POST" action="/fictions/review/1439" role="form" class="form-horizontal form-bordered form-row-stripped">
                                            <input name="__RequestVerificationToken" type="hidden" value="rzjZU2lHnax5Gj4otDNI5c8NlBAlGCR23yqDeoA1tt9YE5t9mb27bUDEPI53V8goYoklCA55E-WGzrOh0wvEsBpcTs5LZmunoqD1VG3LxhQ1" />
                                            <div class="form-body">
                                                <div class="row">
                                                    <div class="col-xs-12">
                                                        <div class="form-group">
                                                            <label class="bold uppercase font-blue-dark control-label col-md-3">Review title</label>
                                                            <div class="col-md-9">
                                                                <input type="text" maxlength="80" name="title" class="form-control" />
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row no-gutter">
                                                    <div class="col-sm-6">
                                                        <div class="form-group">
                                                            <label class="bold uppercase font-blue-dark control-label col-md-6">Overall Score</label>
                                                            <div class="col-md-6">
                                                                    <fieldset name="overall_score" class="star-select">
            <input type="radio" required id="5overall_scoreStars" name="overall_score" class="full" value="10"  />
            <label for="5overall_scoreStars" class="full" title="5 Stars"></label>
            <input type="radio" required id="4 Andoverall_scoreHalfStar" name="overall_score" class="half" value="9"  />
            <label for="4 Andoverall_scoreHalfStar" class="half" title="4 and half star"></label>
            <input type="radio" required id="4overall_scoreStars" name="overall_score" class="full" value="8"  />
            <label for="4overall_scoreStars" class="full" title="4 Stars"></label>
            <input type="radio" required id="3 Andoverall_scoreHalfStar" name="overall_score" class="half" value="7"  />
            <label for="3 Andoverall_scoreHalfStar" class="half" title="3 and half star"></label>
            <input type="radio" required id="3overall_scoreStars" name="overall_score" class="full" value="6"  />
            <label for="3overall_scoreStars" class="full" title="3 Stars"></label>
            <input type="radio" required id="2 Andoverall_scoreHalfStar" name="overall_score" class="half" value="5"  />
            <label for="2 Andoverall_scoreHalfStar" class="half" title="2 and half star"></label>
            <input type="radio" required id="2overall_scoreStars" name="overall_score" class="full" value="4"  />
            <label for="2overall_scoreStars" class="full" title="2 Stars"></label>
            <input type="radio" required id="1 Andoverall_scoreHalfStar" name="overall_score" class="half" value="3"  />
            <label for="1 Andoverall_scoreHalfStar" class="half" title="1 and half star"></label>
            <input type="radio" required id="1overall_scoreStars" name="overall_score" class="full" value="2"  />
            <label for="1overall_scoreStars" class="full" title="1 Stars"></label>
            <input type="radio" required id="overall_scoreHalfStar" name="overall_score" class="half" value="1"  />
            <label for="overall_scoreHalfStar" class="half" title="half star"></label>
    </fieldset>

                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-6">
                                                        <div class="form-group">
                                                            <label class="bold uppercase font-blue-dark control-label col-md-6">Advanced Review</label>
                                                            <div class="col-md-6">
                                                                <label class="mt-checkbox">
                                                                    <input id="advancedReview" name="advancedReview" type="checkbox" value="true" /><input name="advancedReview" type="hidden" value="false" />
                                                                    
                                                                    <span></span>
                                                                </label>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row no-gutter adv-score">
                                                    <div class="col-sm-6">
                                                        <div class="form-group">
                                                            <label class="bold uppercase font-blue-dark control-label col-md-6">Style Score</label>
                                                            <div class="col-md-6">
                                                                    <fieldset name="style_score" class="star-select">
            <input type="radio"  id="5style_scoreStars" name="style_score" class="full" value="10"  />
            <label for="5style_scoreStars" class="full" title="5 Stars"></label>
            <input type="radio"  id="4 Andstyle_scoreHalfStar" name="style_score" class="half" value="9"  />
            <label for="4 Andstyle_scoreHalfStar" class="half" title="4 and half star"></label>
            <input type="radio"  id="4style_scoreStars" name="style_score" class="full" value="8"  />
            <label for="4style_scoreStars" class="full" title="4 Stars"></label>
            <input type="radio"  id="3 Andstyle_scoreHalfStar" name="style_score" class="half" value="7"  />
            <label for="3 Andstyle_scoreHalfStar" class="half" title="3 and half star"></label>
            <input type="radio"  id="3style_scoreStars" name="style_score" class="full" value="6"  />
            <label for="3style_scoreStars" class="full" title="3 Stars"></label>
            <input type="radio"  id="2 Andstyle_scoreHalfStar" name="style_score" class="half" value="5"  />
            <label for="2 Andstyle_scoreHalfStar" class="half" title="2 and half star"></label>
            <input type="radio"  id="2style_scoreStars" name="style_score" class="full" value="4"  />
            <label for="2style_scoreStars" class="full" title="2 Stars"></label>
            <input type="radio"  id="1 Andstyle_scoreHalfStar" name="style_score" class="half" value="3"  />
            <label for="1 Andstyle_scoreHalfStar" class="half" title="1 and half star"></label>
            <input type="radio"  id="1style_scoreStars" name="style_score" class="full" value="2"  />
            <label for="1style_scoreStars" class="full" title="1 Stars"></label>
            <input type="radio"  id="style_scoreHalfStar" name="style_score" class="half" value="1"  />
            <label for="style_scoreHalfStar" class="half" title="half star"></label>
    </fieldset>

                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-6">
                                                        <div class="form-group">
                                                            <label class="bold uppercase font-blue-dark control-label col-md-6">Story Score</label>
                                                            <div class="col-md-6">
                                                                    <fieldset name="story_score" class="star-select">
            <input type="radio"  id="5story_scoreStars" name="story_score" class="full" value="10"  />
            <label for="5story_scoreStars" class="full" title="5 Stars"></label>
            <input type="radio"  id="4 Andstory_scoreHalfStar" name="story_score" class="half" value="9"  />
            <label for="4 Andstory_scoreHalfStar" class="half" title="4 and half star"></label>
            <input type="radio"  id="4story_scoreStars" name="story_score" class="full" value="8"  />
            <label for="4story_scoreStars" class="full" title="4 Stars"></label>
            <input type="radio"  id="3 Andstory_scoreHalfStar" name="story_score" class="half" value="7"  />
            <label for="3 Andstory_scoreHalfStar" class="half" title="3 and half star"></label>
            <input type="radio"  id="3story_scoreStars" name="story_score" class="full" value="6"  />
            <label for="3story_scoreStars" class="full" title="3 Stars"></label>
            <input type="radio"  id="2 Andstory_scoreHalfStar" name="story_score" class="half" value="5"  />
            <label for="2 Andstory_scoreHalfStar" class="half" title="2 and half star"></label>
            <input type="radio"  id="2story_scoreStars" name="story_score" class="full" value="4"  />
            <label for="2story_scoreStars" class="full" title="2 Stars"></label>
            <input type="radio"  id="1 Andstory_scoreHalfStar" name="story_score" class="half" value="3"  />
            <label for="1 Andstory_scoreHalfStar" class="half" title="1 and half star"></label>
            <input type="radio"  id="1story_scoreStars" name="story_score" class="full" value="2"  />
            <label for="1story_scoreStars" class="full" title="1 Stars"></label>
            <input type="radio"  id="story_scoreHalfStar" name="story_score" class="half" value="1"  />
            <label for="story_scoreHalfStar" class="half" title="half star"></label>
    </fieldset>

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="row no-gutter adv-score">
                                                    <div class="col-sm-6">
                                                        <div class="form-group">
                                                            <label class="bold uppercase font-blue-dark control-label col-md-6">Grammar Score</label>
                                                            <div class="col-md-6">
                                                                    <fieldset name="grammar_score" class="star-select">
            <input type="radio"  id="5grammar_scoreStars" name="grammar_score" class="full" value="10"  />
            <label for="5grammar_scoreStars" class="full" title="5 Stars"></label>
            <input type="radio"  id="4 Andgrammar_scoreHalfStar" name="grammar_score" class="half" value="9"  />
            <label for="4 Andgrammar_scoreHalfStar" class="half" title="4 and half star"></label>
            <input type="radio"  id="4grammar_scoreStars" name="grammar_score" class="full" value="8"  />
            <label for="4grammar_scoreStars" class="full" title="4 Stars"></label>
            <input type="radio"  id="3 Andgrammar_scoreHalfStar" name="grammar_score" class="half" value="7"  />
            <label for="3 Andgrammar_scoreHalfStar" class="half" title="3 and half star"></label>
            <input type="radio"  id="3grammar_scoreStars" name="grammar_score" class="full" value="6"  />
            <label for="3grammar_scoreStars" class="full" title="3 Stars"></label>
            <input type="radio"  id="2 Andgrammar_scoreHalfStar" name="grammar_score" class="half" value="5"  />
            <label for="2 Andgrammar_scoreHalfStar" class="half" title="2 and half star"></label>
            <input type="radio"  id="2grammar_scoreStars" name="grammar_score" class="full" value="4"  />
            <label for="2grammar_scoreStars" class="full" title="2 Stars"></label>
            <input type="radio"  id="1 Andgrammar_scoreHalfStar" name="grammar_score" class="half" value="3"  />
            <label for="1 Andgrammar_scoreHalfStar" class="half" title="1 and half star"></label>
            <input type="radio"  id="1grammar_scoreStars" name="grammar_score" class="full" value="2"  />
            <label for="1grammar_scoreStars" class="full" title="1 Stars"></label>
            <input type="radio"  id="grammar_scoreHalfStar" name="grammar_score" class="half" value="1"  />
            <label for="grammar_scoreHalfStar" class="half" title="half star"></label>
    </fieldset>

                                                            </div>
                                                        </div>
                                                    </div>
                                                    <div class="col-sm-6">
                                                        <div class="form-group">
                                                            <label class="bold uppercase font-blue-dark control-label col-md-6">Character Score</label>
                                                            <div class="col-md-6">
                                                                    <fieldset name="character_score" class="star-select">
            <input type="radio"  id="5character_scoreStars" name="character_score" class="full" value="10"  />
            <label for="5character_scoreStars" class="full" title="5 Stars"></label>
            <input type="radio"  id="4 Andcharacter_scoreHalfStar" name="character_score" class="half" value="9"  />
            <label for="4 Andcharacter_scoreHalfStar" class="half" title="4 and half star"></label>
            <input type="radio"  id="4character_scoreStars" name="character_score" class="full" value="8"  />
            <label for="4character_scoreStars" class="full" title="4 Stars"></label>
            <input type="radio"  id="3 Andcharacter_scoreHalfStar" name="character_score" class="half" value="7"  />
            <label for="3 Andcharacter_scoreHalfStar" class="half" title="3 and half star"></label>
            <input type="radio"  id="3character_scoreStars" name="character_score" class="full" value="6"  />
            <label for="3character_scoreStars" class="full" title="3 Stars"></label>
            <input type="radio"  id="2 Andcharacter_scoreHalfStar" name="character_score" class="half" value="5"  />
            <label for="2 Andcharacter_scoreHalfStar" class="half" title="2 and half star"></label>
            <input type="radio"  id="2character_scoreStars" name="character_score" class="full" value="4"  />
            <label for="2character_scoreStars" class="full" title="2 Stars"></label>
            <input type="radio"  id="1 Andcharacter_scoreHalfStar" name="character_score" class="half" value="3"  />
            <label for="1 Andcharacter_scoreHalfStar" class="half" title="1 and half star"></label>
            <input type="radio"  id="1character_scoreStars" name="character_score" class="full" value="2"  />
            <label for="1character_scoreStars" class="full" title="1 Stars"></label>
            <input type="radio"  id="character_scoreHalfStar" name="character_score" class="half" value="1"  />
            <label for="character_scoreHalfStar" class="half" title="half star"></label>
    </fieldset>

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="form-group">
                                                    <label class="bold uppercase font-blue-dark control-label col-md-3">Review Content</label>
                                                    <div class="col-md-9">
                                                        <textarea id="review-content" name="review_content"></textarea>
                                                        <script>
                                                            tinymce.init({
                                                                selector: 'textarea#review-content',
                                                                skin: "lightgray",
                                                                content_css: '/Content/Themes/Bootstrap/Site.css',
                                                                plugins:
                                                                    "table code textcolor colorpicker fullscreen hr save paste image link media emoticons spoiler",
                                                                toolbar: [
                                                                    'bold italic underline | emoticons link image | alignleft aligncenter alignright | bullist numlist | spoiler | undo redo | code'
                                                                ],
                                                                menubar: false
                                                            });
                                                        </script>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-actions">
                                                <div class="col-md-offset-3 col-md-9">
                                                    <button type="submit" class="btn red-sunglo">Submit</button>
                                                    <button type="button" class="btn default">Cancel</button>
                                                </div>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                                <!-- START REVIEW ITEM-->
                                <div class="row review">
                                    <!--START REVIEW LEFT CONTENT-->
                                    <div class="col-sm-2 review-side">
                                        <div class="text-center margin-bottom-20">
                                            <img src="https://www.gravatar.com/avatar/5e93c652f9ecd53b6c4f88b1b6ecde3c?s=100&r=r&d=mm.jpg" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="img-responsive" alt="lutexv" ></img>
                                        </div>
                                        <ul class="list-unstyled">
                                            <li>Overall Score</li>
                                            <li>
                                                <div class="font-red-thunderbird star star-50"></div>
                                            </li>
                                        </ul>
                                    </div><!--END REVIEW LEFT CONTENT-->
                                    <!--START REVIEW RIGHT CONTENT-->
                                    <div class="col-sm-10 review-right-content">
                                        <div class="review-header caption margin-bottom-10">
                                            <h4 class="bold uppercase font-blue-dark">The jewel of Royal Road Legends</h4>
                                            <div class="review-meta">
                                                <span class="bold uppercase font-red-sunglo">
                                                    <span class="small">by </span><a href="//royalroadl.com/user/profile/11428">lutexv</a>
                                                </span>
                                                <span class="pull-right date bold uppercase font-red-sunglo small"><a href="?review=19227#review-19227" id="review-19227"><time unixtime="1430876665" datetime="2015-05-06T01:44:25.0000000Z" format="U" >Wednesday, May 6, 2015 1:44:25 AM</time></a></span>
                                            </div>
                                        </div>
                                            <input type="checkbox" id="rv-19227" />
                                            <div class="review-content" id="review-content-19227">
                                                <p>To me, this is the best story that this website have. And that is because it contains all of the regular clichês that you will normally see in this website's novels but delivers it in a refreshing and original form.</p><p>&nbsp;</p><p>First of all, the main concept: reincarnation. I don't like this idea. I think it is silly and unnecessary in most of the novels. This is a exception. What normally happens that pisses me off is the fact that the MC reincarnates and thus is born with some sort of advantages over other peoples of this world but his past life don't really matters. The life the MC had, the people he met and the things he has done don't affect the story.</p><p>&nbsp;</p><p>But here, in Forgotten Conqueror, the past life of the MC plays a major role not just in who he is but in the setting of the world and the plot (since it becomes the MC's goal to discover his origins and discover the status of his past-life enimies).</p><p>&nbsp;</p><p>Usually, the author redirect's the reader's attention of the motive of the reincarnation (or give a half-assed excuses for it to have happened) and starts a new chain of events that the MC has to face.</p><p>&nbsp;</p><p>Not here: the MC seeks only to live his life with his beloved family while researching the history of the world, looking for the motive of his reincarnation and to finish the things he couldn't in his past life (a.k.a. facing an antagosnist that was not revealed, yet). &nbsp;</p><p>&nbsp;</p><p>Usually the MC is overpowered, but still manages to find struggles that requires him to unleash some kind of hidden power and then finish off his enemies. Most times, the description of the MC's powers don't matchs his action when he is in danger, because although he is&nbsp;DESCRIBED AS OVERPOWER he really isn't. And that is fine with me. I like MC's that aren't overpower. What I don't like is this discrepancy in the description and plot, that is usually fixed by the author giving some kind of excuse for his enemy being an exception to the beforehand mentioned power-above-all of the MC.</p><p>&nbsp;</p><p>But not here. Kaidus is described as a higher-being and act as such. He is strong, smart and is always ready to finish off his opponents with his full power. His life is never at stake. When he finds some kind of struggle is just to keep his identity a secret. And that is because he IS OVERPOWER not just DESCRIBED AS OVERPOWER and then faced with even more powerful enemies.</p><p>&nbsp;</p><p>Those things together with gorgeous world building made by the author made me fall deeply in love with this novel. The only thing I could suggest is for the author to give a little more depth to the supporting characters (a.k.a. his family and friends).</p><p>&nbsp;</p><p>Regarding other reviews:</p><p>@Sylth: You've made a serious mistake regarding the plot of this series. Kaidus haven't lived 20 lives. What happened is that he was born 20 times and killed at his birth, exactly for the motive of him not being able to control his mana at birth and thus having white hair. That is why, when he finally gets to live, such a long time has already passed. Also, you say that he shouldn't obey other people because he is utterly powerful. That is simply not how things work in life. If you think life that you really should try to change that mindset, because if you get some kind of power in your life people will not like you. He has power but he don't have to show off this fact. Actually, as long that it doesn't hurt his family or friends, Kaidus tries to live a normal life, seeking only knowledge. If he started to act in his everyday like the higher-being that he is, he would not be able to live the ordinary and quiet life with his family (one that he likes). By acting normal in his college he gets to continue to live a normal life with his family AND is able to research for his past. He don't do things just because he is told to, he does them because they are good for him. And regarding his father, Troyle, the injury he suffered don't makes him useless. I don't know if you have ever had an injury, but the fact is that when you do, in most of the cases it doesn't make you like a disabled person. It just makes you worse than you were. The fact that Troyle was a top-tier mercenary enabled him to have some degree of skill even with a injured shoulder. I think that is all.</p><p>&nbsp;</p><p>@boridu: Well... everyone has their tastes. But I don't think even if you don't like the novel you should say those things, because they simply are not true. If you really believe them you should read again and work hard you your interpretation skills.</p>
                                            </div>
                                            <label for="rv-19227" class="small bold uppercase"></label>
                                        <!--START REVIEW FOOTER-->
                                        <div class="review-footer">
                                            <div class="btn-group btn-group-solid margin-bottom-10">
                                                <a href="/report/review/19227" class="btn red">
                                                    <i class="fa fa-warning"></i>
                                                    Report
                                                </a>
                                            </div>
                                            <div class="btn-group btn-group-solid pull-right" style="float: right !important;">
<form action="/fictions/ratereview/19227" class="inline-block" method="post"><input name="__RequestVerificationToken" type="hidden" value="ZDbzzAJx6Uakz1phl90o4OYlGpbbTC3PN7yZs3h6fv-kI5uRHlgyo41iuPPiWF0nbJq9Hk1wAJ1cKIfmrJXu3yqCw6VKu27M4qFIzXzpg4w1" />                                                    <button class="btn blue-dark" name="up" value="true">
                                                        <i class="fa fa-thumbs-up"></i> 40
                                                    </button>
                                                    <button class="btn red-sunglo" name="up" value="false">
                                                        <i class="fa fa-thumbs-down"></i> 2
                                                    </button>
</form>                                            </div>
                                        </div><!--END REVIEW FOOTER-->
                                    </div><!--END REVIEW RIGHT CONTENT-->
                                </div><!--END REVIEW ITEM-->
    <!-- START REVIEW ITEM-->
                                <div class="row review">
                                    <!--START REVIEW LEFT CONTENT-->
                                    <div class="col-sm-2 review-side">
                                        <div class="text-center margin-bottom-20">
                                            <img src="https://cruise-community.me.uk/images/avatars/gallery/abstracts/abstract11.gif?dateline=1475729733" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="img-responsive" alt="Krishna1289" ></img>
                                        </div>
                                        <ul class="list-unstyled">
                                            <li>Overall Score</li>
                                            <li>
                                                <div class="font-red-thunderbird star star-45"></div>
                                            </li>
                                        </ul>
                                    </div><!--END REVIEW LEFT CONTENT-->
                                    <!--START REVIEW RIGHT CONTENT-->
                                    <div class="col-sm-10 review-right-content">
                                        <div class="review-header caption margin-bottom-10">
                                            <h4 class="bold uppercase font-blue-dark">Unique Story</h4>
                                            <div class="review-meta">
                                                <span class="bold uppercase font-red-sunglo">
                                                    <span class="small">by </span><a href="//royalroadl.com/user/profile/7842">Krishna1289</a>
                                                </span>
                                                <span class="pull-right date bold uppercase font-red-sunglo small"><a href="?review=11640#review-11640" id="review-11640"><time unixtime="1424630278" datetime="2015-02-22T18:37:58.0000000Z" format="U" >Sunday, February 22, 2015 6:37:58 PM</time></a></span>
                                            </div>
                                        </div>
                                            <div class="review-content" id="review-content-11640">
                                                <p>Even though Re-incarnation concept is the same.. the way you developed the story till now is really unique.. MC is not &nbsp;meek nor arrogant, whole being humble. &nbsp;Even though MC is OP he doesn't show off, it's pace is also quite nice. and i am hoping you can release at lest a chapter daily (only hope though XD). and your story doesn't have grammatical mistakes and easily readable,and you wrote in a way that reader don't lose interest in the story so far. it's one of the best stories i have read.. Thanks for the story</p>
                                            </div>
                                        <!--START REVIEW FOOTER-->
                                        <div class="review-footer">
                                            <div class="btn-group btn-group-solid margin-bottom-10">
                                                <a href="/report/review/11640" class="btn red">
                                                    <i class="fa fa-warning"></i>
                                                    Report
                                                </a>
                                            </div>
                                            <div class="btn-group btn-group-solid pull-right" style="float: right !important;">
<form action="/fictions/ratereview/11640" class="inline-block" method="post"><input name="__RequestVerificationToken" type="hidden" value="sqjgmK-1YT7yKY0GJU76uTjW0qgXCydq0asZjUlqtehHnmJJHzna2eJnOsWuuIUuFR-Lp68J5npVIrBNHMrFDHBA2FDL3AhJUhL6EqRr0LM1" />                                                    <button class="btn blue-dark" name="up" value="true">
                                                        <i class="fa fa-thumbs-up"></i> 141
                                                    </button>
                                                    <button class="btn red-sunglo" name="up" value="false">
                                                        <i class="fa fa-thumbs-down"></i> 10
                                                    </button>
</form>                                            </div>
                                        </div><!--END REVIEW FOOTER-->
                                    </div><!--END REVIEW RIGHT CONTENT-->
                                </div><!--END REVIEW ITEM-->
    <!-- START REVIEW ITEM-->
                                <div class="row review">
                                    <!--START REVIEW LEFT CONTENT-->
                                    <div class="col-sm-2 review-side">
                                        <div class="text-center margin-bottom-20">
                                            <img src="https://i.imgur.com/sdpQnAM.jpg?dateline=1434987126" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="img-responsive" alt="EvilKatamari" ></img>
                                        </div>
                                        <ul class="list-unstyled">
                                            <li>Overall Score</li>
                                            <li>
                                                <div class="font-red-thunderbird star star-45"></div>
                                            </li>
                                                <li>Style Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-45"></div>
                                                </li>
                                                <li>Story Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-50"></div>
                                                </li>
                                                <li>Grammar Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-50"></div>
                                                </li>
                                                <li>Character Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-45"></div>
                                                </li>
                                        </ul>
                                    </div><!--END REVIEW LEFT CONTENT-->
                                    <!--START REVIEW RIGHT CONTENT-->
                                    <div class="col-sm-10 review-right-content">
                                        <div class="review-header caption margin-bottom-10">
                                            <h4 class="bold uppercase font-blue-dark">Very captivating</h4>
                                            <div class="review-meta">
                                                <span class="bold uppercase font-red-sunglo">
                                                    <span class="small">by </span><a href="//royalroadl.com/user/profile/9387">EvilKatamari</a>
                                                </span>
                                                <span class="pull-right date bold uppercase font-red-sunglo small"><a href="?review=13445#review-13445" id="review-13445"><time unixtime="1426263849" datetime="2015-03-13T16:24:09.0000000Z" format="U" >Friday, March 13, 2015 4:24:09 PM</time></a></span>
                                            </div>
                                        </div>
                                            <input type="checkbox" id="rv-13445" />
                                            <div class="review-content" id="review-content-13445">
                                                <p>I finaly registered on royal road, after blazing trough your ff in about 5 hours (from 1 am to 6 am in the morning) to thank you properly for the story and the wonderful time I had reading it.</p><p>As many have mentioned the world is very unique and hard to grasp at first, the story starts dark with many dead people, but so did humanity troughout it's early history! I like the &nbsp;mature writing style,and the very human side of the charakters, with all their fear, jealousy, anxiety and anger.</p><p>Some have pointed out, that the reincarnation genre is already often used and nothing new, but so was the idea of a young gifted boy with magical abilitys attending school and&nbsp;many of us still liked Harry Potter! So it's not always about original ideas, but what you do with them and how you can captivate your readers in sharing the feelings of the characters, which in my humble opinion the author did very well.</p><p><br>Please keep up the good work and I hope you like the token of appreciation i left you via the new option !</p><p>(and please excuse my grammatical errors if I made any, for english is not my native tongue and I am writing this from my smartphone ^^)</p>
                                            </div>
                                            <label for="rv-13445" class="small bold uppercase"></label>
                                        <!--START REVIEW FOOTER-->
                                        <div class="review-footer">
                                            <div class="btn-group btn-group-solid margin-bottom-10">
                                                <a href="/report/review/13445" class="btn red">
                                                    <i class="fa fa-warning"></i>
                                                    Report
                                                </a>
                                            </div>
                                            <div class="btn-group btn-group-solid pull-right" style="float: right !important;">
<form action="/fictions/ratereview/13445" class="inline-block" method="post"><input name="__RequestVerificationToken" type="hidden" value="8K18Y3eoex_3M3epJ9DuBKQIxML4pAhqcWsIlEWo9QqR5f1esk3Z2jFThIaP1AdbTN7nX9CipAdIiOXu5ChtWKUbkgIccKf-iVrAZaCMwhI1" />                                                    <button class="btn blue-dark" name="up" value="true">
                                                        <i class="fa fa-thumbs-up"></i> 39
                                                    </button>
                                                    <button class="btn red-sunglo" name="up" value="false">
                                                        <i class="fa fa-thumbs-down"></i> 5
                                                    </button>
</form>                                            </div>
                                        </div><!--END REVIEW FOOTER-->
                                    </div><!--END REVIEW RIGHT CONTENT-->
                                </div><!--END REVIEW ITEM-->
    <!-- START REVIEW ITEM-->
                                <div class="row review">
                                    <!--START REVIEW LEFT CONTENT-->
                                    <div class="col-sm-2 review-side">
                                        <div class="text-center margin-bottom-20">
                                            <img src="//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="img-responsive" alt="runeraccoon" ></img>
                                        </div>
                                        <ul class="list-unstyled">
                                            <li>Overall Score</li>
                                            <li>
                                                <div class="font-red-thunderbird star star-50"></div>
                                            </li>
                                                <li>Style Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-50"></div>
                                                </li>
                                                <li>Story Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-40"></div>
                                                </li>
                                                <li>Grammar Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-40"></div>
                                                </li>
                                                <li>Character Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-50"></div>
                                                </li>
                                        </ul>
                                    </div><!--END REVIEW LEFT CONTENT-->
                                    <!--START REVIEW RIGHT CONTENT-->
                                    <div class="col-sm-10 review-right-content">
                                        <div class="review-header caption margin-bottom-10">
                                            <h4 class="bold uppercase font-blue-dark">Immersive storytelling!</h4>
                                            <div class="review-meta">
                                                <span class="bold uppercase font-red-sunglo">
                                                    <span class="small">by </span><a href="//royalroadl.com/user/profile/11711">runeraccoon</a>
                                                </span>
                                                <span class="pull-right date bold uppercase font-red-sunglo small"><a href="?review=17925#review-17925" id="review-17925"><time unixtime="1429861822" datetime="2015-04-24T07:50:22.0000000Z" format="U" >Friday, April 24, 2015 7:50:22 AM</time></a></span>
                                            </div>
                                        </div>
                                            <input type="checkbox" id="rv-17925" />
                                            <div class="review-content" id="review-content-17925">
                                                <p>I came to this site looking specifically for Original English Light Novels, but then I came to this fantasy masterpiece.</p><p>By now, I personally differentiate "light novel" and "YA novel" in the terms of their commercial-quality. A lot of light novels begin as web novels, and thus, allow for more exploration of the world, the mechanics of the magic system, and the characters without being limited by the need to make it presentable. Pardon me for mentioning this here, as I am still looking for light novel shape in the middle of the market today. Perhaps it's still not the right direction, and I'm looking forward to be corrected. :D&nbsp;</p><p>Anyway, this is precisely what this story develops. More exploration, more details without worrying of getting cut since "it's not necessary&nbsp;to the main plot or character development". And I love this story for that. It's those fantasy stories that I grow up in and come to love, but with so much more freedom for the author that a lot of YA novel authors (I think) don't allow themselves to have.</p><p>I'm always an emotional reader, and thus Overall score is how I generally <em>feel</em> about a story. And thus I gave it 5 stars.&nbsp;</p><p>But then here comes the nitpicky parts.</p><p>&nbsp;</p><p><span style="text-decoration: underline">Style</span></p><p>This is probably what I love the most. So far, the handful count of stories I read here usually come off as "fanfictions". The titles I love beside this one is following either Moonlight Sculptor, or Mushoku Tensei. But this story is so comfortable in its clothes. Not particularly bowing to a light novel I have in mind, this is more like a nod YA Fantasy novel with so much liberty of exploration. Love it.&nbsp;</p><p>The storytelling is also immersive. Not only it has an established, complicated, and rich premise, it also&nbsp;<em>delivers</em> the premise with mastery. Several tidbits of the past come naturally, and not only through the main character, but also from other characters.&nbsp;</p><p>It might be contrary to what I mentioned above, but I just want to say that it also doesn't promise&nbsp;<em>too much</em>. They&nbsp;usually come as prophecies to be fulfilled, quests, or the cryptic message about "if the right people know, they will be rewarded accordingly". It just focuses on Kaidus' agenda, and his determination to protect his current life.</p><p>But I also love the Headmaster who tries to throw Kaidus off the balance a little, making him responsible for the other students, <em>expanding</em> his "current life" more than just his family. Making him live properly, I should say. So, nice subplot.&nbsp;</p><p>&nbsp;</p><p><span style="text-decoration: underline">Story</span></p><p>There still leaves so much for the story to tell. I assume this part focuses on the Plot rather than the style, so I have nothing much to say. The plot is threaded carefully and with no rush.&nbsp;</p><p>&nbsp;</p><p><span style="text-decoration: underline">Grammar</span></p><p>I'm not an English native speaker, so I don't really notice grammar mistakes inside the story. It's good enough to make the reader drown in the story itself, it's good enough for me.&nbsp;</p><p>&nbsp;</p><p><span style="text-decoration: underline">Character</span></p><p>Now how should I go with this?&nbsp;</p><p>Since the beginning, Kaidus already has an established character. This is not a coming-of-age story. But, he also has his own demons, and the inner struggle is real. I love it.</p><p>Not only him, even his parents have the little character growth. I also love the take on Prim. I'd love to see more rivalry, but Kaidus is already too OP. It won't be fair to the people around him. But if he can't have rivalry about magic, there are still other ways to have rivalry about; his research, for example. A young character knowledgeable and also in the pursuit of knowledge just as passionate as he is would provide a good balance.</p><p>^ But I'm just thinking about it on a whim]</p><p>Anyway, everyone is well developed, but I'd also love to see more outside factors that will tip him off of balance besides polite, love for family, hatred for injustice, or pissed off by the headmaster. (LOL)</p><p>&nbsp;</p><p><span style="text-decoration: underline">Worldbuilding</span></p><p>It's probably a 3.5 stars.&nbsp;</p><p>There is a lack of in-reference to our world as to how your time terms might mean, or what significance it has in that world to be different. (Like, lunar calendar for farming, tree-months for hunter-gatherer culture, etc.)&nbsp;</p><p>I love the magical system and the ranks, it is well explained and give adequate general idea. I haven't checked the glossary yet, but it's probably described even further there.&nbsp;</p><p>The lack is actually for so wide a world that not even reborn 27 times will make Kaidus know everything, he still hasn't explored it other than reading the books.&nbsp;</p><p>&nbsp;</p><p>It still has rooms for growth, but I came here to enjoy the ride.</p><p>Thank you for writing this masterpiece. :D I'll definitely follow through until the end~</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>
                                            </div>
                                            <label for="rv-17925" class="small bold uppercase"></label>
                                        <!--START REVIEW FOOTER-->
                                        <div class="review-footer">
                                            <div class="btn-group btn-group-solid margin-bottom-10">
                                                <a href="/report/review/17925" class="btn red">
                                                    <i class="fa fa-warning"></i>
                                                    Report
                                                </a>
                                            </div>
                                            <div class="btn-group btn-group-solid pull-right" style="float: right !important;">
<form action="/fictions/ratereview/17925" class="inline-block" method="post"><input name="__RequestVerificationToken" type="hidden" value="CjzdX3DwZAr_hbCTGvrkHuLjgbigtMrIDIog6h0eYjeMYkgiO86p8rDuC6etCGFw-GBupJbmk_7SJgymbGJGH_sVxezjPERuZ_ea5ZA52sc1" />                                                    <button class="btn blue-dark" name="up" value="true">
                                                        <i class="fa fa-thumbs-up"></i> 7
                                                    </button>
                                                    <button class="btn red-sunglo" name="up" value="false">
                                                        <i class="fa fa-thumbs-down"></i> 1
                                                    </button>
</form>                                            </div>
                                        </div><!--END REVIEW FOOTER-->
                                    </div><!--END REVIEW RIGHT CONTENT-->
                                </div><!--END REVIEW ITEM-->
    <!-- START REVIEW ITEM-->
                                <div class="row review">
                                    <!--START REVIEW LEFT CONTENT-->
                                    <div class="col-sm-2 review-side">
                                        <div class="text-center margin-bottom-20">
                                            <img src="//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="img-responsive" alt="Jormungand" ></img>
                                        </div>
                                        <ul class="list-unstyled">
                                            <li>Overall Score</li>
                                            <li>
                                                <div class="font-red-thunderbird star star-40"></div>
                                            </li>
                                        </ul>
                                    </div><!--END REVIEW LEFT CONTENT-->
                                    <!--START REVIEW RIGHT CONTENT-->
                                    <div class="col-sm-10 review-right-content">
                                        <div class="review-header caption margin-bottom-10">
                                            <h4 class="bold uppercase font-blue-dark">A promising Fanfic!!!</h4>
                                            <div class="review-meta">
                                                <span class="bold uppercase font-red-sunglo">
                                                    <span class="small">by </span><a href="//royalroadl.com/user/profile/6571">Jormungand</a>
                                                </span>
                                                <span class="pull-right date bold uppercase font-red-sunglo small"><a href="?review=11585#review-11585" id="review-11585"><time unixtime="1424604662" datetime="2015-02-22T11:31:02.0000000Z" format="U" >Sunday, February 22, 2015 11:31:02 AM</time></a></span>
                                            </div>
                                        </div>
                                            <div class="review-content" id="review-content-11585">
                                                <p>its weird your ff not in best rated. Well your story is interesting one and the MC clearly has unique character. I hope you continue your story more!</p>
                                            </div>
                                        <!--START REVIEW FOOTER-->
                                        <div class="review-footer">
                                            <div class="btn-group btn-group-solid margin-bottom-10">
                                                <a href="/report/review/11585" class="btn red">
                                                    <i class="fa fa-warning"></i>
                                                    Report
                                                </a>
                                            </div>
                                            <div class="btn-group btn-group-solid pull-right" style="float: right !important;">
<form action="/fictions/ratereview/11585" class="inline-block" method="post"><input name="__RequestVerificationToken" type="hidden" value="lWGWJdWpAdYanVyIdPOVqEgVR75RXR2gqy24IuAybkyvDa62fC2hih3YA1rh8R7fO395a9gt0IItuc_qrsminVgngisYhNxZ73K9NETZtvo1" />                                                    <button class="btn blue-dark" name="up" value="true">
                                                        <i class="fa fa-thumbs-up"></i> 42
                                                    </button>
                                                    <button class="btn red-sunglo" name="up" value="false">
                                                        <i class="fa fa-thumbs-down"></i> 7
                                                    </button>
</form>                                            </div>
                                        </div><!--END REVIEW FOOTER-->
                                    </div><!--END REVIEW RIGHT CONTENT-->
                                </div><!--END REVIEW ITEM-->
    <!-- START REVIEW ITEM-->
                                <div class="row review">
                                    <!--START REVIEW LEFT CONTENT-->
                                    <div class="col-sm-2 review-side">
                                        <div class="text-center margin-bottom-20">
                                            <img src="//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="img-responsive" alt="Hana" ></img>
                                        </div>
                                        <ul class="list-unstyled">
                                            <li>Overall Score</li>
                                            <li>
                                                <div class="font-red-thunderbird star star-45"></div>
                                            </li>
                                                <li>Style Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-45"></div>
                                                </li>
                                                <li>Story Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-40"></div>
                                                </li>
                                                <li>Grammar Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-45"></div>
                                                </li>
                                                <li>Character Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-50"></div>
                                                </li>
                                        </ul>
                                    </div><!--END REVIEW LEFT CONTENT-->
                                    <!--START REVIEW RIGHT CONTENT-->
                                    <div class="col-sm-10 review-right-content">
                                        <div class="review-header caption margin-bottom-10">
                                            <h4 class="bold uppercase font-blue-dark">Wonderfull read</h4>
                                            <div class="review-meta">
                                                <span class="bold uppercase font-red-sunglo">
                                                    <span class="small">by </span><a href="//royalroadl.com/user/profile/11323">Hana</a>
                                                </span>
                                                <span class="pull-right date bold uppercase font-red-sunglo small"><a href="?review=18310#review-18310" id="review-18310"><time unixtime="1430170931" datetime="2015-04-27T21:42:11.0000000Z" format="U" >Monday, April 27, 2015 9:42:11 PM</time></a></span>
                                            </div>
                                        </div>
                                            <input type="checkbox" id="rv-18310" />
                                            <div class="review-content" id="review-content-18310">
                                                <p>Style: Unlike many of the fan-fictions I've come across, this one is relatively professional and true to western story-telling. Many people have adopted the style of short descriptions and extra spacing, copying the great amount of light novels translated from Japanese or Korean style. That is all well and good but I, myself, prefer this style. At times there are certainly odd breaks in paragraphs; there are unusual word patters and junctions that cause the flow of voice to waver. However that is not something just anyone can master and is highly dependent not only on the author, but the reader. &nbsp;If we leave out such specific details, we can see that Zaide's voice is efficient in pulling the reader along--so I give Style a 4.5.</p><p>&nbsp;</p><p>Story: The story thus far is very interesting. I would say that it is quite unique in its own right. My issue is that the possibility for plot the author has provided is too limitless. Like LMS of other light novels, it has too much room for story. Now everyone must understand that this is probably &nbsp;intentional, especially with a story like this that appraises a character's life . But what this means is that this story will definitely stretch, perhaps years or even tens if Zaide has the tenacity for it. If not, than readers, especially lovers of the story, might have to steel themselves for disappointment in this regard. Now I know I'm being quite negative, but I'm a realist, and when I read online stories I must always ready myself for this possibility as it always exists, especially in the ones I like. (4)</p><p>&nbsp;</p><p>Grammar: On many other reviews, I see a lot of people giving lower scores, (4 to 2) because of very common mistakes like: using the wrong word, the wrong phrase, or the wrong spelling. That is a very, <em>very</em>, little part of grammar. I almost never see them assess the misuse of punctuation, syntax, and tense--to name a phew. There are sooo many mistakes writers make in longer pieces and it is entirely understandable because there are sooo many rules. I rarely see a published novel with perfect grammar, much less an online hobby. If i were to judge it like the other people who find the first list of mistakes, then everyone's grammar would fall under a 1. So i'll judge it based on readability: grammar is a 4.5.</p><p>&nbsp;</p><p>Character: The most amazing detail about this story is most definitely the characters. The author has a charming way of introducing them, not just as they are but who they are. Their actions are so filled with emotion that you'd think Zaide was a social psychologist. That's how good it is. Sometimes he goes overboard--mostly with Kaidus--but then again, he is a mystery, we're not suppose to know his every intention. However the other characters are completely open to us and thus are easy to love and relate despite their supporting roles. You can really see the emotion that fuels their actions and makes them real. Bravo to Zaide for this. (5)</p>
                                            </div>
                                            <label for="rv-18310" class="small bold uppercase"></label>
                                        <!--START REVIEW FOOTER-->
                                        <div class="review-footer">
                                            <div class="btn-group btn-group-solid margin-bottom-10">
                                                <a href="/report/review/18310" class="btn red">
                                                    <i class="fa fa-warning"></i>
                                                    Report
                                                </a>
                                            </div>
                                            <div class="btn-group btn-group-solid pull-right" style="float: right !important;">
<form action="/fictions/ratereview/18310" class="inline-block" method="post"><input name="__RequestVerificationToken" type="hidden" value="uY2iI4qf9FBGi4E1AHepDkkj86jTVNAtlVXhB8nTa_vyKTuH75hE8zb18iKXITxg_rX1dKYm5zMIwOaLHSdS0-KEMgSfJKhFdepHY7vPsTE1" />                                                    <button class="btn blue-dark" name="up" value="true">
                                                        <i class="fa fa-thumbs-up"></i> 6
                                                    </button>
                                                    <button class="btn red-sunglo" name="up" value="false">
                                                        <i class="fa fa-thumbs-down"></i> 1
                                                    </button>
</form>                                            </div>
                                        </div><!--END REVIEW FOOTER-->
                                    </div><!--END REVIEW RIGHT CONTENT-->
                                </div><!--END REVIEW ITEM-->
    <!-- START REVIEW ITEM-->
                                <div class="row review">
                                    <!--START REVIEW LEFT CONTENT-->
                                    <div class="col-sm-2 review-side">
                                        <div class="text-center margin-bottom-20">
                                            <img src="//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="img-responsive" alt="Justaway" ></img>
                                        </div>
                                        <ul class="list-unstyled">
                                            <li>Overall Score</li>
                                            <li>
                                                <div class="font-red-thunderbird star star-50"></div>
                                            </li>
                                        </ul>
                                    </div><!--END REVIEW LEFT CONTENT-->
                                    <!--START REVIEW RIGHT CONTENT-->
                                    <div class="col-sm-10 review-right-content">
                                        <div class="review-header caption margin-bottom-10">
                                            <h4 class="bold uppercase font-blue-dark">One of the best stories i&#39;ve read</h4>
                                            <div class="review-meta">
                                                <span class="bold uppercase font-red-sunglo">
                                                    <span class="small">by </span><a href="//royalroadl.com/user/profile/7782">Justaway</a>
                                                </span>
                                                <span class="pull-right date bold uppercase font-red-sunglo small"><a href="?review=11586#review-11586" id="review-11586"><time unixtime="1424606301" datetime="2015-02-22T11:58:21.0000000Z" format="U" >Sunday, February 22, 2015 11:58:21 AM</time></a></span>
                                            </div>
                                        </div>
                                            <div class="review-content" id="review-content-11586">
                                                <p>I'm really enjoying reading this. The combination of your style and grammar make it easy and fun to read. The story is interesting, it's not going to fast or slow, just the right thing. Im hoping to see you uploading this story for a long time</p>
                                            </div>
                                        <!--START REVIEW FOOTER-->
                                        <div class="review-footer">
                                            <div class="btn-group btn-group-solid margin-bottom-10">
                                                <a href="/report/review/11586" class="btn red">
                                                    <i class="fa fa-warning"></i>
                                                    Report
                                                </a>
                                            </div>
                                            <div class="btn-group btn-group-solid pull-right" style="float: right !important;">
<form action="/fictions/ratereview/11586" class="inline-block" method="post"><input name="__RequestVerificationToken" type="hidden" value="1CBNUQg36li4kgL2CMmjWFmBo6ZyIe79vE5oIglmo21fUZ82kcv3fQgNa8qowsxlcTGucX4upvjlAQqSZ9uI3ejv1eJ7VVvbbvQd1rd3Hhg1" />                                                    <button class="btn blue-dark" name="up" value="true">
                                                        <i class="fa fa-thumbs-up"></i> 35
                                                    </button>
                                                    <button class="btn red-sunglo" name="up" value="false">
                                                        <i class="fa fa-thumbs-down"></i> 7
                                                    </button>
</form>                                            </div>
                                        </div><!--END REVIEW FOOTER-->
                                    </div><!--END REVIEW RIGHT CONTENT-->
                                </div><!--END REVIEW ITEM-->
    <!-- START REVIEW ITEM-->
                                <div class="row review">
                                    <!--START REVIEW LEFT CONTENT-->
                                    <div class="col-sm-2 review-side">
                                        <div class="text-center margin-bottom-20">
                                            <img src="https://www.gravatar.com/avatar/f28bc294c1526995b8d70f453d52b6d6.png?dateline=1430196048" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="img-responsive" alt="Shiroyuki" ></img>
                                        </div>
                                        <ul class="list-unstyled">
                                            <li>Overall Score</li>
                                            <li>
                                                <div class="font-red-thunderbird star star-50"></div>
                                            </li>
                                        </ul>
                                    </div><!--END REVIEW LEFT CONTENT-->
                                    <!--START REVIEW RIGHT CONTENT-->
                                    <div class="col-sm-10 review-right-content">
                                        <div class="review-header caption margin-bottom-10">
                                            <h4 class="bold uppercase font-blue-dark">Re-reading</h4>
                                            <div class="review-meta">
                                                <span class="bold uppercase font-red-sunglo">
                                                    <span class="small">by </span><a href="//royalroadl.com/user/profile/2030">Shiroyuki</a>
                                                </span>
                                                <span class="pull-right date bold uppercase font-red-sunglo small"><a href="?review=22195#review-22195" id="review-22195"><time unixtime="1433394178" datetime="2015-06-04T05:02:58.0000000Z" format="U" >Thursday, June 4, 2015 5:02:58 AM</time></a></span>
                                            </div>
                                        </div>
                                            <div class="review-content" id="review-content-22195">
                                                <p>This series is the only series i re-read other than Harry Potter. It's just so plain amazing, and I re-read it even before the series over! Keep up the good job man!</p>
                                            </div>
                                        <!--START REVIEW FOOTER-->
                                        <div class="review-footer">
                                            <div class="btn-group btn-group-solid margin-bottom-10">
                                                <a href="/report/review/22195" class="btn red">
                                                    <i class="fa fa-warning"></i>
                                                    Report
                                                </a>
                                            </div>
                                            <div class="btn-group btn-group-solid pull-right" style="float: right !important;">
<form action="/fictions/ratereview/22195" class="inline-block" method="post"><input name="__RequestVerificationToken" type="hidden" value="c-O9C7DZ2fFcM3EdLp4zoWXB1a3LRVTty3LGf7m_rcsnMFbxZWzrieMWaK6dfKBUz6C5tAi2rFVPHpos2Cem-ycnqQ8hBV9UjwMCdhOttIY1" />                                                    <button class="btn blue-dark" name="up" value="true">
                                                        <i class="fa fa-thumbs-up"></i> 5
                                                    </button>
                                                    <button class="btn red-sunglo" name="up" value="false">
                                                        <i class="fa fa-thumbs-down"></i> 1
                                                    </button>
</form>                                            </div>
                                        </div><!--END REVIEW FOOTER-->
                                    </div><!--END REVIEW RIGHT CONTENT-->
                                </div><!--END REVIEW ITEM-->
    <!-- START REVIEW ITEM-->
                                <div class="row review">
                                    <!--START REVIEW LEFT CONTENT-->
                                    <div class="col-sm-2 review-side">
                                        <div class="text-center margin-bottom-20">
                                            <img src="//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="img-responsive" alt="Introspection" ></img>
                                        </div>
                                        <ul class="list-unstyled">
                                            <li>Overall Score</li>
                                            <li>
                                                <div class="font-red-thunderbird star star-50"></div>
                                            </li>
                                                <li>Style Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-50"></div>
                                                </li>
                                                <li>Story Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-50"></div>
                                                </li>
                                                <li>Grammar Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-45"></div>
                                                </li>
                                                <li>Character Score</li>
                                                <li>
                                                    <div class="font-red-thunderbird star star-50"></div>
                                                </li>
                                        </ul>
                                    </div><!--END REVIEW LEFT CONTENT-->
                                    <!--START REVIEW RIGHT CONTENT-->
                                    <div class="col-sm-10 review-right-content">
                                        <div class="review-header caption margin-bottom-10">
                                            <h4 class="bold uppercase font-blue-dark">Reread it so many times</h4>
                                            <div class="review-meta">
                                                <span class="bold uppercase font-red-sunglo">
                                                    <span class="small">by </span><a href="//royalroadl.com/user/profile/22441">Introspection</a>
                                                </span>
                                                <span class="pull-right date bold uppercase font-red-sunglo small"><a href="?review=38118#review-38118" id="review-38118"><time unixtime="1448513140" datetime="2015-11-26T04:45:40.0000000Z" format="U" >Thursday, November 26, 2015 4:45:40 AM</time></a></span>
                                            </div>
                                        </div>
                                            <input type="checkbox" id="rv-38118" />
                                            <div class="review-content" id="review-content-38118">
                                                <p>This is my first review on this site and first book review probably since high school (I am in Grad school now).&nbsp;You can say that I just joined&nbsp;this site so I can write your a review :).</p><p>I&nbsp;am an avid book and a big fan of OP MC&nbsp;style.(i.e., MC doesn’t&nbsp;struggle&nbsp;much in the story, bad things happened prior to the beginning). Hence, I really enjoyed your style and must had reread portions of it&nbsp;like 10 times. It is currently in the top 5 on my reading list (which includes &gt;200 Chinese LN).</p><p>So far I like the story. It is especially refreshing having read so many Chinese LN with following cliches (which I hope you won’t do in the future):</p><ul><li>Near-Infinite levels: every time when MC reaches the top, he finds himself to be the&nbsp;weakest again &amp; having a long way to go (and repeat for each arc). Good example would be&nbsp;http://www.kanshu.com/artinfo/12881.html (one the most popular Chinese LN). Right now, you have 5 ranks&nbsp;for Mages (http://forgottenconqueror.com/the-world/). I am pretty certain there would be higher ranks, but try not to add so many.&nbsp;</li><li>Struggling in a lot of big fights (and almost every time something suddenly activates or MC realizes something, and MC becomes much stronger and owns the enemy).</li><li>Stupid/irrational antagonists (so far, the enemy doesn’t know much about Kaidus <img class="wp-smiley" style="max-height: 1em" src="http://royalroadl.com/wp-includes/images/smilies/simple-smile.png" alt=":)"> ). I like how you explain the reason behind everything while keeping a nice flow.</li><li>Black &amp; white&nbsp;antagonists. Please don’t do this. Make it complicated, and present moral dilemma. An extreme example would be antagonists who apparently killed MC’s mom (but for good reason, which I believe to be the case in the manhua red storm)</li></ul><p><em>Grammar:</em></p><p>Took half a point off for a couple of minor grammatical mistakes. I had no trouble understanding everything after the 3rd chapter.</p><p>&nbsp;</p><p>Thanks for great work :).&nbsp; I will donate to your Patreon.</p>
                                            </div>
                                            <label for="rv-38118" class="small bold uppercase"></label>
                                        <!--START REVIEW FOOTER-->
                                        <div class="review-footer">
                                            <div class="btn-group btn-group-solid margin-bottom-10">
                                                <a href="/report/review/38118" class="btn red">
                                                    <i class="fa fa-warning"></i>
                                                    Report
                                                </a>
                                            </div>
                                            <div class="btn-group btn-group-solid pull-right" style="float: right !important;">
<form action="/fictions/ratereview/38118" class="inline-block" method="post"><input name="__RequestVerificationToken" type="hidden" value="OYdZ873szWYIUjPbpNWj3YCX5C2WZwc-n-8eEEiZYv6s-XG6Ungddul4IBdb9slAwMI3uX_uTikoJTWHewl8o1mLD5V6uQohErlILyXPvfw1" />                                                    <button class="btn blue-dark" name="up" value="true">
                                                        <i class="fa fa-thumbs-up"></i> 5
                                                    </button>
                                                    <button class="btn red-sunglo" name="up" value="false">
                                                        <i class="fa fa-thumbs-down"></i> 0
                                                    </button>
</form>                                            </div>
                                        </div><!--END REVIEW FOOTER-->
                                    </div><!--END REVIEW RIGHT CONTENT-->
                                </div><!--END REVIEW ITEM-->
    <!-- START REVIEW ITEM-->
                                <div class="row review">
                                    <!--START REVIEW LEFT CONTENT-->
                                    <div class="col-sm-2 review-side">
                                        <div class="text-center margin-bottom-20">
                                            <img src="https://img1.jurko.net/avatar_8491.gif?dateline=1420443923" onError="this.onerror=null; this.src='//forum.royalroadl.com/uploads/avatars/W0jloSY.jpg';" class="img-responsive" alt="Evrin" ></img>
                                        </div>
                                        <ul class="list-unstyled">
                                            <li>Overall Score</li>
                                            <li>
                                                <div class="font-red-thunderbird star star-50"></div>
                                            </li>
                                        </ul>
                                    </div><!--END REVIEW LEFT CONTENT-->
                                    <!--START REVIEW RIGHT CONTENT-->
                                    <div class="col-sm-10 review-right-content">
                                        <div class="review-header caption margin-bottom-10">
                                            <h4 class="bold uppercase font-blue-dark">Its a fun take on an old theme</h4>
                                            <div class="review-meta">
                                                <span class="bold uppercase font-red-sunglo">
                                                    <span class="small">by </span><a href="//royalroadl.com/user/profile/5732">Evrin</a>
                                                </span>
                                                <span class="pull-right date bold uppercase font-red-sunglo small"><a href="?review=12289#review-12289" id="review-12289"><time unixtime="1425182500" datetime="2015-03-01T04:01:40.0000000Z" format="U" >Sunday, March 1, 2015 4:01:40 AM</time></a></span>
                                            </div>
                                        </div>
                                            <input type="checkbox" id="rv-12289" />
                                            <div class="review-content" id="review-content-12289">
                                                <p>Good story, story with an OP MC, in an interesting setting.&nbsp; I'm thoroughly enjoying this one.</p><p>to answer a question asked above, I'm pretty sure this isn't on the top 50 yet because it's simply too new. not enough time has passed for this to get as many hits as the ones that have been around for a while. But it's still popular, top of the weekly charts, which is how I found it.</p><p>&nbsp;</p><p>I</p><p>&nbsp;</p><p>I like how you're being consistent with the MC, and how he doesn't seem to be a perfectly good or evil, but more of a middle road personality.</p><p>&nbsp;</p><p>Overall, I'd recommend this story to anyone who is looking for a story in an interestingly diverse world where the MC wasn't some poor loser in his previous existence.</p>
                                            </div>
                                            <label for="rv-12289" class="small bold uppercase"></label>
                                        <!--START REVIEW FOOTER-->
                                        <div class="review-footer">
                                            <div class="btn-group btn-group-solid margin-bottom-10">
                                                <a href="/report/review/12289" class="btn red">
                                                    <i class="fa fa-warning"></i>
                                                    Report
                                                </a>
                                            </div>
                                            <div class="btn-group btn-group-solid pull-right" style="float: right !important;">
<form action="/fictions/ratereview/12289" class="inline-block" method="post"><input name="__RequestVerificationToken" type="hidden" value="OKoPk_enaYSjcJFW05XaICFLQXaCb28QZi--YXVx_zVbjGC2PKjH47FHJrSAWQ4gGVBOkP4SZuVsfjFz8Hot46VaIgK3Ipeyx-_kzsplQNM1" />                                                    <button class="btn blue-dark" name="up" value="true">
                                                        <i class="fa fa-thumbs-up"></i> 13
                                                    </button>
                                                    <button class="btn red-sunglo" name="up" value="false">
                                                        <i class="fa fa-thumbs-down"></i> 3
                                                    </button>
</form>                                            </div>
                                        </div><!--END REVIEW FOOTER-->
                                    </div><!--END REVIEW RIGHT CONTENT-->
                                </div><!--END REVIEW ITEM-->
                            <div class=text-center><ul class=pagination><li class="page-active"><a href="/fiction/1439/forgotten-conqueror?reviews=1">1</a></li><li ><a href="/fiction/1439/forgotten-conqueror?reviews=2">2</a></li><li ><a href="/fiction/1439/forgotten-conqueror?reviews=3">3</a></li><li ><a href="/fiction/1439/forgotten-conqueror?reviews=4">4</a></li><li ><a href="/fiction/1439/forgotten-conqueror?reviews=5">5</a></li><li><a href="/fiction/1439/forgotten-conqueror?reviews=2">Next &rsaquo;</a></li><li><a href="/fiction/1439/forgotten-conqueror?reviews=28">Last &raquo;</a></li></ul></div>
                        </div><!--END REVIEW PORTLET-->
                    </div><!--END MAIN CONTENT-->
                </div>
            </div>
        </div>
    </div>
</div>



                </div>
            </div>
        </div>
    </div>
    <div class="page-prefooter">
        <div class="container">
            <div class="row">
                <div class="col-md-3 col-sm-6 col-xs-12 footer-block">
                    <h2>About</h2>
                    <p> Welcome to Royal Road&trade;, the home of web novels and fan fictions! In our amazing community, you can find various talented individuals who write as a hobby or even professionally, artists who create art for them, and many, many readers who provide valuable feedback and encouragement. </p>
                </div>
                <div class="col-md-3 col-sm-6 col-xs12 footer-block">
                    <h2>Amazon Affiliate</h2>
                    <div class="smalltext">
                        RoyalRoadL is a participant in the Amazon Services LLC Associates Program, an affiliate advertising program designed to provide a means for sites to earn advertising fees by advertising and linking to amazon.com.
                    </div>
                </div>
                <div class="col-md-3 col-sm-6 col-xs-12 footer-block">
                    <h2>Theme Select</h2>
                    <div class="subscribe-form">
                        <select class="style-select form-control">

                            <option >Dark</option>
                            <option selected=&#39;selected&#39;>Light</option>
                        </select>
                    </div>
                    <br />
                    <h2>Follow Us On</h2>
                    <ul class="social-icons">
                        <li>
                            <a href="javascript:;" data-original-title="rss" class="rss"></a>
                        </li>
                        <li>
                            <a href="https://facebook.com/royalroadl" data-original-title="facebook" class="facebook"></a>
                        </li>
                        <li>
                            <a href="https://twitter.com/royalroadl" data-original-title="twitter" class="twitter"></a>
                        </li>
                        <li>
                            <a href="https://plus.google.com/112874101768462471938/posts" data-original-title="googleplus" class="googleplus"></a>
                        </li>
                        <li>
                            <a href="https://www.youtube.com/channel/UC30Yw2WNBcEfV8oNl9qSNAQ" data-original-title="youtube" class="youtube"></a>
                        </li>
                    </ul>
                </div>
                <div class="col-md-3 col-sm-6 col-xs-12 footer-block">
                    <h2>Contacts</h2>
                    <address>
                        Email:
                        <script>
                            document.write('<' + 'a' + ' ' + 'h' + 'r' + 'e' + 'f' + '=' + "'" + '&' + '#' + '1' + '0' + '9' + ';' + 'a' + 'i' + 'l' + '&' + '#' + '1' + '1' + '6' + ';' + 'o' +
                            '&' + '#' + '5' + '8' + ';' + 'a' + '&' + '#' + '3' + '7' + ';' + '6' + '&' + '#' + '5' + '2' + ';' + 'm' + 'i' + '%' + '6' + 'E' + '&' + '#' + '6' +
                            '4' + ';' + '%' + '&' + '#' + '5' + '5' + ';' + '2' + '&' + '#' + '1' + '1' + '1' + ';' + '&' + '#' + '1' + '2' + '1' + ';' + '%' + '6' + '1' + 'l' +
                            'r' + 'o' + '&' + '#' + '9' + '7' + ';' + '%' + '6' + '4' + '%' + '6' + '&' + '#' + '6' + '7' + ';' + '&' + '#' + '3' + '7' + ';' + '2' + '&' + '#' +
                            '6' + '9' + ';' + '&' + '#' + '9' + '9' + ';' + '&' + '#' + '3' + '7' + ';' + '6' + 'F' + 'm' + "'" + '>' + '&' + '#' + '9' + '7' + ';' + '&' + '#' +
                            '1' + '0' + '0' + ';' + 'm' + 'i' + 'n' + '&' + '#' + '6' + '4' + ';' + 'r' + 'o' + 'y' + '&' + '#' + '9' + '7' + ';' + 'l' + 'r' + 'o' + '&' + '#' +
                            '9' + '7' + ';' + 'd' + 'l' + '&' + '#' + '4' + '6' + ';' + 'c' + 'o' + 'm' + '<' + '/' + 'a' + '>');</script><noscript>[Turn on JavaScript to see the email address]</noscript>
                    </address>
                    <address>
                        Advertising:
                        <script>
                            document.write('<' + 'a' + ' ' + 'h' + 'r' + 'e' + 'f' + '=' + "'" + 'm' + 'a' + '&' + '#' + '1' + '0' + '5' + ';' + 'l' + '&' + '#' + '1' + '1' + '6' + ';' + 'o' +
                            '&' + '#' + '5' + '8' + ';' + '%' + '6' + '1' + '&' + '#' + '3' + '7' + ';' + '6' + '6' + 'f' + 'i' + '%' + '6' + 'C' + '%' + '&' + '#' + '5' + '4' +
                            ';' + '&' + '#' + '5' + '7' + ';' + '&' + '#' + '9' + '7' + ';' + '&' + '#' + '1' + '1' + '6' + ';' + '%' + '6' + '&' + '#' + '5' + '3' + ';' + '&' +
                            '#' + '6' + '4' + ';' + 'r' + 'o' + 'y' + '&' + '#' + '9' + '7' + ';' + 'l' + 'r' + 'o' + 'a' + 'd' + 'l' + '&' + '#' + '4' + '6' + ';' + '&' + '#' +
                            '9' + '9' + ';' + 'o' + 'm' + "'" + '>' + 'a' + 'f' + 'f' + '&' + '#' + '1' + '0' + '5' + ';' + 'l' + 'i' + '&' + '#' + '9' + '7' + ';' + 't' + '&' +
                            '#' + '1' + '0' + '1' + ';' + '&' + '#' + '6' + '4' + ';' + 'r' + '&' + '#' + '1' + '1' + '1' + ';' + 'y' + 'a' + 'l' + 'r' + 'o' + 'a' + '&' + '#' +
                            '1' + '0' + '0' + ';' + 'l' + '&' + '#' + '4' + '6' + ';' + 'c' + 'o' + 'm' + '<' + '/' + 'a' + '>');</script><noscript>[Turn on JavaScript to see the email address]</noscript>
                    </address>
                    <br />
                    <h2>Info</h2>
                    <p><a href="/tos">Terms of Service</a></p>
                    <p>
                        <a href="//www.iubenda.com/privacy-policy/8009648" class="iubenda-nostyle no-brand iubenda-embed" title="Privacy Policy">Privacy Policy</a>
                        <script type="text/javascript">(function (w,d) {var loader = function () {var s = d.createElement("script"), tag = d.getElementsByTagName("script")[0]; s.src = "//cdn.iubenda.com/iubenda.js"; tag.parentNode.insertBefore(s,tag);}; if(w.addEventListener){w.addEventListener("load", loader, false);}else if(w.attachEvent){w.attachEvent("onload", loader);}else{w.onload = loader;}})(window, document);</script>
                    </p>
                    <p><a href="/blog">Blog</a></p>
                    <p><a href="http://status.royalroadl.com">Status</a></p>
                    <p><a href="/staff">Staff</a></p>
                </div>
            </div>
        </div>
    </div>
    <!-- END PRE-FOOTER -->
    <!-- BEGIN INNER FOOTER -->
    <div class="page-footer footer">
        <div class="container">
            <div class="pull-left">
                2013-2017 &copy; Royal Road&trade;
            </div>
        </div>
    </div>
    <div class="scroll-to-top">
        <i class="icon-arrow-up"></i>
    </div>
    <!--[if lt IE 9]>
    <script src="/bundles/ie8?v=eCvW3jHxf03NpkzKOoqMFi6ZIZ-u1pUwM4sHoXW3lMY1"></script>

    <![endif]-->
    <script src="/bundles/core?v=f7TCa_hBJtNyF48WuX8AQpAxZ9YPkgf7mTJbFjUq5v41"></script>

<script>
    (function (i, s, o, g, r, a, m) {
        i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
            (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-49828272-1', 'auto');
    
    ga('set', 'dimension1', '1439');

    ga('send', 'pageview');

</script>
<script type="text/javascript" id="hs-script-loader" async defer src="//js.hs-scripts.com/3283268.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
                
            setTimeout(function () {
                if (window.canRunAds === undefined) {
                    $(".square").html('<div class="bg-dark font-white text-center font-sm" style="width: 300px; height: 250px; padding: 20px; display: table">' +
                        '<div style="display: table-cell; vertical-align: middle; text-align: center; font-weight: bold">' +
                        '<div class="margin-bottom-10"><i class="fa fa-ban font-red-thunderbird"></i> Ad Block Detected</div><div class="font-xs margin-bottom-10">Nobody likes ads; however, ads help us sustain and develop the site. Please consider disabling your ad blocker to support us or <a class="font-yellow-gold" href="/premium">subscribe as a premium user</a> for only $2.99 a month for additional features!</div><div class="font-xs">Problematic ads? Report them <a class="font-red" href="https://goo.gl/forms/o8Rx6CM1I9aSEPw92">here</a></div>' +
                        '</div>' +
                        '</div>');
                    $(".wide").html('<div class="bg-dark font-white text-center subs font-sm" style="padding: 10px; display: table">' +
                        '<div style="display: table-cell; vertical-align: middle; text-align: center; font-weight: bold">' +
                        '<div class="margin-bottom-10"><i class="fa fa-ban font-red-thunderbird"></i> Ad Block Detected</div><div class="font-xs margin-bottom-10">Nobody likes ads; however, ads help us sustain and develop the site. Please consider disabling your ad blocker to support us or <a class="font-yellow-gold" href="/premium">subscribe as a premium user</a> for only $2.99 a month for additional features!</div><div class="font-xs">Problematic ads? Report them <a class="font-red" href="https://goo.gl/forms/o8Rx6CM1I9aSEPw92">here</a></div>' +
                        '</div>' +
                        '</div>');
                }
            }, 1000);
                
        });
    </script>
    
    <script src="/Scripts/plugins/bootstrap-confirmation/bootstrap-confirmation.min.js" type="text/javascript"></script>
    <script src="/Scripts/plugins/datatables/datatables.all.min.js" type="text/javascript"></script>
    <script type="text/javascript" src="/Scripts/Site/fiction-page.js"></script>
    <script type="text/javascript">
        if (!$('[name=advancedReview][type=checkbox]')[0].checked) {
            $('.adv-score').hide();
        }
        $('[name=advancedReview][type=checkbox]').change(function () {
            if (this.checked) {
                $('.adv-score').show();
            } else {
                $('.adv-score').hide();
            }
        });
    </script>

    <script>
        tinymce.init({
            plugins: "table code textcolor colorpicker fullscreen hr save paste image link media emoticons spoiler",
            skin: "lightgray",
            content_css: '/Content/Themes/Styles/Core?v=bKb85H7-UCB_JJVaKvfmzClMknN7Ww7h4SArb-6Oppc1 ,/Content/Themes/Bootstrap/Site.css',
            height: 300,
            relative_urls: false,
            menu: {},
            toolbar: "undo redo | fontsizeselect | bold italic underline strikethrough removeformat forecolor | table spoiler | hr image | alignleft aligncenter alignright alignjustify | fullscreen code",
            fontsize_formats: '0.8em 0.9em 1.0em 1.1em 1.3em 1.5em 1.8em 2.0em 2.5em 3.0em',
            selector: 'textarea.tinymce',
            body_class: 'chapter-content',
            content_style: 'body#tinymce{padding: 10px 15px !important;} .spoiler-inner{display: block!important;} .spoilerButton{display: none} .spoiler{background: rgba(0,0,0, .2); padding: 10px;}',
            setup: function (ed) {
                ed.on('keydown',
                    function (event) {
                        if (event.keyCode == 9) { // tab pressed
                            ed.execCommand('mceInsertContent', false, '&emsp;&emsp;');
                            event.preventDefault();
                            return false;
                        }
                    });
            }
        });
    </script>
</body>
</html>",
  "info":    { "title": "Forgotten Conqueror",
      "author": "Za1d3",
      "desc": "Powerless and filled with raging anger for half his life, an avenger grasps hold of what was to be his redemption only to find despair and darkness.\nHis mind lost, his anger went on to bring about the path of carnage. He is, but an inextinguishable flame that threatens to consume everything; all in the name of retribution.\nDeath was but a moments reprieve for his agony. His rage overflows even after the sweet release.\nUnable to be snuffed out by the laws of the world, he is granted life once more In a different era. All those whom his vengeance is focused on, vanished into obscurity with the passage of time.\nWhat does one who has all the power of the world at his finger-tips do, when all the reasons for that power have vanished?" }
}